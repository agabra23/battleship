(()=>{"use strict";const e=function(e){let t=0;const o=()=>{let t=0;return e.forEach((e=>{t++})),t};return{getLength:o,isSunk:()=>t>=o(),hit:()=>{t++},getHits:()=>t,getPath:()=>e,resetHits:()=>{t=0},hits:t}},t=e=>{const t=[],o=function(e){const t=[...Array(10)].map((e=>Array(10).fill("none"))),o=[],r=[];let n=[];const a=e=>{n.push(e)};return{placeShip:e=>{e.getPath().forEach((o=>{const[r,n]=o;t[r][n]=e})),a(e)},boardArray:t,receiveAttack:e=>{const[n,a]=e;let s,l=!1;s=o.some((t=>{const[o,r]=t;return o===e[0]&&r===e[1]})),l=r.some((t=>{const[o,r]=t;return o===e[0]&&r===e[1]})),"none"!==t[n][a]&&!1===s?(t[n][a].hit(),o.push(e)):"none"===t[n][a]&&!1===l&&r.push(e)},hits:o,misses:r,addShip:a,resetGameboard:()=>{o=[],r=[],n=[]},isShip:e=>{const[o,r]=e;return"none"!==t[o][r]},getShip:e=>{const[o,r]=e;return t[o][r]},ships:n,type:e}}(e),r=e=>{t.push(e)};return{attempt:r,board:o,type:e,generateMove:()=>{const e=e=>Math.floor(Math.random()*e),o=e=>t.some((t=>{const[o,r]=t;return o===e[0]&&r===e[1]}));let n=[e(9),e(9)];for(;o(n);)n=[e(9),e(9)];return r(n),n},generateRandomPath:e=>{const t=Math.random()<.5;let o,r;t?(o=Math.floor(Math.random()*(10-e+1)),r=Math.floor(10*Math.random())):(o=Math.floor(10*Math.random()),r=Math.floor(Math.random()*(10-e+1)));const n=[];for(let a=0;a<e;a++)t?n.push([o+a,r]):n.push([o,r+a]);return n}}},o=(()=>{const t=(e,t)=>{const[o,r]=e,n=document.getElementById(`${t.type} - ${o},${r}`),a=t.isShip(e);n.innerHTML=a?"Hit":"Miss"};let o=!0;const r=[2,3,4,5];let n=5;const s=()=>{const e=document.getElementById("chooseShip");r.find((e=>e===n-1))?(n--,e.textContent=`Choose ${n} Coordinates`):(document.querySelectorAll(".selectCell").forEach((e=>{e.style.pointerEvents="none"})),e.textContent='Click "Start Game" to Begin.')},l=e=>{const[t,o]=e,r=document.querySelectorAll(".selectCell");for(const e of r)if(parseInt(e.dataset.x)===t&&parseInt(e.dataset.y)===o)return e},d=()=>{o=!o};return{renderBoard:e=>{const o=document.getElementById("board");o.innerHTML='<div id="overlay"></div>';const r=document.createElement("h3");console.log(e),r.innerHTML=`${e.type}'s Turn`,o.appendChild(r),e.boardArray.forEach(((t,r)=>{const n=document.createElement("div");n.classList.add("rowDiv"),t.forEach(((t,o)=>{const s=document.createElement("div");s.classList.add("boardCell"),s.id=`${e.type} - ${r},${o}`,s.dataset.board=e.type,s.dataset.x=r,s.dataset.y=o,e===a.computerPlayer.board&&"none"!==t&&s.classList.add("selected"),"none"!==t&&(s.classList.add("shipCell"),t.isSunk()&&(s.style.backgroundColor="red")),s.addEventListener("click",(e=>{e.stopPropagation(),""===s.textContent&&a.moveEvent(s)})),n.appendChild(s)})),o.appendChild(n)})),e.misses.forEach((o=>{t(o,e)})),e.hits.forEach((o=>{t(o,e)}))},attempt:t,stopClicks:()=>{document.getElementById("overlay").style.pointerEvents="all"},startClicks:()=>{document.getElementById("overlay").style.pointerEvents="none"},styleSunk:e=>{document.querySelectorAll(".rowDiv").forEach((t=>{document.querySelectorAll(".boardCell").forEach((t=>{const[o,r]=[t.dataset.x,t.dataset.y];"User"===e?a.userPlayer.board.isShip([o,r])&&a.userPlayer.board.getShip([o,r]).isSunk()&&(t.style.backgroundColor="red"):a.computerPlayer.board.isShip([o,r])&&a.computerPlayer.board.getShip([o,r]).isSunk()&&(t.style.backgroundColor="red")}))}))},renderStart:()=>{document.getElementById("startScreen").style.display="flex",document.getElementById("board").style.display="none",document.getElementById("switchTurnBtn").style.display="none",(()=>{const t=document.getElementById("startScreen");t.style.display="flex";const r=document.createElement("button");r.textContent="Flip Ship Direction",r.id="flipBtn";const c=document.createElement("button");c.id="startBtn",c.textContent="Start Game";const i=document.createElement("h3");i.textContent=`Choose ${n} Coordinates`,i.id="chooseShip";for(let u=0;u<10;u++){const p=document.createElement("div");p.classList.add("rowDiv");for(let t=0;t<10;t++){const r=document.createElement("div");r.classList.add("selectCell"),p.appendChild(r),r.dataset.x=u,r.dataset.y=t;let d=!1;const c=e=>void 0===e||a.computerPlayer.board.isShip([e.dataset.x,e.dataset.y]);r.onmouseenter=e=>{r.style.backgroundColor="yellow",c(r)&&void 0!==r&&(r.style.backgroundColor="black",d=!0);for(let e=1;e<n;e++){let r=l([u,t+e]);o&&(r=l([u+e,t])),void 0!==r&&(r.style.backgroundColor="yellow"),c(r)&&void 0!==r?(r.style.backgroundColor="black",d=!0):void 0===r&&(d=!0)}},r.onmouseout=e=>{d=!1,r.style.backgroundColor="";for(let e=1;e<n;e++){let r=l([u,t+e]);o&&(r=l([u+e,t])),void 0!==r&&(r.style.backgroundColor="")}},r.onclick=c=>{if(!d){let d=[[parseInt(r.dataset.x),parseInt(r.dataset.y)]];void 0!==r&&r.classList.add("selected");for(let e=1;e<n;e++){let r=l([u,t+e]);o&&(r=l([u+e,t])),void 0!==r&&(r.classList.add("selected"),d.push([parseInt(r.dataset.x),parseInt(r.dataset.y)]))}a.computerPlayer.board.placeShip(e(d)),console.log("placed"),s()}}}t.appendChild(p),t.appendChild(i),t.appendChild(r),t.appendChild(c),c.onclick=()=>{t.style.display="",document.getElementById("board").style.display="",document.getElementById("switchTurnBtn").style.display="",c.style.display="none"},r.onclick=d}})()},toggleTurnBtn:()=>{const e=document.getElementById("switchTurnBtn");e.disabled=!e.disabled}}})(),r=o,n=(()=>{const o=t("Computer"),a=t("User");let s=a;const l=e=>{e.board.ships.length>0&&e.board.ships.every((e=>e.isSunk()))&&alert(`${s.type} wins`)};return{initGame:()=>{a.board,o.board},switchTurn:()=>{console.log("start switch",n.currentPlayer.type),n.currentPlayer===a?n.currentPlayer=o:n.currentPlayer=a,console.log("end switch",n.currentPlayer.type)},computerPlayer:o,userPlayer:a,currentPlayer:s,checkLoss:l,moveEvent:e=>{r.stopClicks();const t="Computer"===e.dataset.board?o.board:a.board;t.receiveAttack([e.dataset.x,e.dataset.y]),r.attempt([e.dataset.x,e.dataset.y],t),r.styleSunk(t.type),l(s),n.switchTurn(),r.toggleTurnBtn()},computerMoveEvent:async()=>{r.stopClicks(),await(750,new Promise((e=>{setTimeout(e,750)}))),console.log("after 1 sec");const e=n.computerPlayer.generateMove(),t=n.computerPlayer.board;t.receiveAttack(e),r.attempt(e,t),r.styleSunk(t.type),n.checkLoss(n.currentPlayer),n.switchTurn(),r.toggleTurnBtn()},setComputerShips:()=>{n.userPlayer.board.placeShip(e(o.generateRandomPath(2))),n.userPlayer.board.placeShip(e(o.generateRandomPath(3))),n.userPlayer.board.placeShip(e(o.generateRandomPath(4))),n.userPlayer.board.placeShip(e(o.generateRandomPath(5)))}}})(),a=n;a.initGame();const s=document.getElementById("switchTurnBtn");r.renderBoard(a.currentPlayer.board),r.renderStart(),a.setComputerShips(),s.onclick=()=>{r.toggleTurnBtn(),r.renderBoard(a.currentPlayer.board),a.currentPlayer===a.computerPlayer?a.computerMoveEvent():r.startClicks()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,