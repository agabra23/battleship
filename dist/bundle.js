(()=>{"use strict";const t=function(t){let e=0;const r=()=>{let e=0;return t.forEach((t=>{e++})),e};return{getLength:r,isSunk:()=>e>=r(),hit:()=>{e++},getHits:()=>e,getPath:()=>t,resetHits:()=>{e=0},hits:e}},e=e=>{const r=[],o=function(){const e=[...Array(10)].map((t=>Array(10).fill("none"))),r=[],o=[];let a=[];const n=t=>{t.getPath().forEach((r=>{const[o,a]=r;e[o][a]=t})),s(t)},s=t=>{a.push(t)};return{placeShip:n,boardArray:e,receiveAttack:t=>{const[a,n]=t;let s,c=!1;s=r.some((e=>{const[r,o]=e;return r===t[0]&&o===t[1]})),c=o.some((e=>{const[r,o]=e;return r===t[0]&&o===t[1]})),"none"!==e[a][n]&&!1===s?(e[a][n].hit(),r.push(t)):"none"===e[a][n]&&!1===c&&o.push(t)},hits:r,misses:o,addShip:s,resetGameboard:()=>{r=[],o=[],a=[]},initBoard:()=>{n(t([[1,4],[1,5]])),n(t([[6,4],[6,5],[6,6]])),n(t([[4,2],[5,2],[6,2],[7,2]])),n(t([[8,3],[8,4],[8,5],[8,6],[8,7]])),n(t([[2,3],[2,4],[2,5],[2,6],[2,7]]))},isShip:t=>{const[r,o]=t;return"none"!==e[r][o]},getShip:t=>{const[r,o]=t;return e[r][o]},ships:a}}(),a=t=>{r.push(t)};return"computer"===e?{attempt:a,generateMove:()=>{const t=t=>Math.floor(Math.random()*t),e=t=>r.some((e=>{const[r,o]=e;return r===t[0]&&o===t[1]}));let o=[t(9),t(9)];for(;e(o);)o=[t(9),t(9)];return o},board:o}:{attempt:a,board:o}},r=t=>{const e=document.getElementById("board");t.boardArray.forEach(((r,o)=>{const a=document.createElement("div");a.classList.add("rowDiv"),r.forEach(((e,r)=>{const n=document.createElement("div");n.classList.add("boardCell"),n.id=`${o},${r}`,n.dataset.board=t,n.dataset.x=o,n.dataset.y=r,"none"!==e&&n.classList.add("shipCell"),a.appendChild(n)})),e.appendChild(a)}))},o=(t,e)=>{const[r,o]=t,a=document.getElementById(`${r},${o}`),n=e.isShip(t);a.innerHTML=n?"Hit":"Miss"},a=(()=>{const t=e("computer"),r=e("user");let a=r;return{initGame:()=>{console.log("init");const e=r.board;t.board.initBoard(),e.initBoard()},playRound:(e,a)=>{e===r&&(t.board.receiveAttack([2,3]),o([2,3],t.board))},switchTurn:()=>{a=a===r?t:r},computerPlayer:t,userPlayer:r,currentPlayer:a,checkLoss:t=>t.board.ships.every((t=>t.isSunk()))}})();a.initGame(),r(a.computerPlayer.board),a.playRound(a.currentPlayer),document.querySelectorAll(".boardCell").forEach((t=>{t.addEventListener("click",(()=>{console.log("click"),a.computerPlayer.board.receiveAttack([t.dataset.x,t.dataset.y]),console.log(a.computerPlayer.board.getShip([t.dataset.x,t.dataset.y]).isSunk()),a.checkLoss(a.computerPlayer)&&alert("win")}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,