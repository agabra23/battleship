(()=>{"use strict";const e=function(e){let t=0;const r=()=>{let t=0;return e.forEach((e=>{t++})),t};return{getLength:r,isSunk:()=>t>=r(),hit:()=>{t++},getHits:()=>t,getPath:()=>e,resetHits:()=>{t=0},hits:t}},t=t=>{const r=[],n=function(t){const r=[...Array(10)].map((e=>Array(10).fill("none"))),n=[],o=[];let s=[];const a=e=>{e.getPath().forEach((t=>{const[n,o]=t;r[n][o]=e})),l(e)},l=e=>{s.push(e)};return{placeShip:a,boardArray:r,receiveAttack:e=>{const[t,s]=e;let a,l=!1;a=n.some((t=>{const[r,n]=t;return r===e[0]&&n===e[1]})),l=o.some((t=>{const[r,n]=t;return r===e[0]&&n===e[1]})),"none"!==r[t][s]&&!1===a?(r[t][s].hit(),n.push(e)):"none"===r[t][s]&&!1===l&&o.push(e)},hits:n,misses:o,addShip:l,resetGameboard:()=>{n=[],o=[],s=[]},initBoard:()=>{a(e([[1,4],[1,5]])),a(e([[6,4],[6,5],[6,6]])),a(e([[4,2],[5,2],[6,2],[7,2]])),a(e([[8,3],[8,4],[8,5],[8,6],[8,7]]))},isShip:e=>{const[t,n]=e;return"none"!==r[t][n]},getShip:e=>{const[t,n]=e;return r[t][n]},ships:s,type:t}}(t),o=e=>{r.push(e)};return{attempt:o,board:n,type:t,generateMove:()=>{const e=e=>Math.floor(Math.random()*e),t=e=>r.some((t=>{const[r,n]=t;return r===e[0]&&n===e[1]}));let n=[e(9),e(9)];for(;t(n);)n=[e(9),e(9)];return o(n),n}}},r=(()=>{const t=(e,t)=>{const[r,n]=e,o=document.getElementById(`${t.type} - ${r},${n}`),s=t.isShip(e);o.innerHTML=s?"Hit":"Miss"},r=e=>{const[t,r]=e,n=document.querySelectorAll(".selectCell");for(const e of n)if(parseInt(e.dataset.x)===t&&parseInt(e.dataset.y)===r)return e};return{renderBoard:e=>{const r=document.getElementById("board");r.innerHTML='<div id="overlay"></div>';const n=document.createElement("h3");console.log(e),n.innerHTML=`${e.type}'s Turn`,r.appendChild(n),e.boardArray.forEach(((t,n)=>{const o=document.createElement("div");o.classList.add("rowDiv"),t.forEach(((t,r)=>{const a=document.createElement("div");a.classList.add("boardCell"),a.id=`${e.type} - ${n},${r}`,a.dataset.board=e.type,a.dataset.x=n,a.dataset.y=r,"none"!==t&&(a.classList.add("shipCell"),t.isSunk()&&(a.style.backgroundColor="red")),a.addEventListener("click",(e=>{e.stopPropagation(),""===a.textContent&&s.moveEvent(a)})),o.appendChild(a)})),r.appendChild(o)})),e.misses.forEach((r=>{t(r,e)})),e.hits.forEach((r=>{t(r,e)}))},attempt:t,stopClicks:()=>{document.getElementById("overlay").style.pointerEvents="all"},startClicks:()=>{document.getElementById("overlay").style.pointerEvents="none"},styleSunk:e=>{document.querySelectorAll(".rowDiv").forEach((t=>{document.querySelectorAll(".boardCell").forEach((t=>{const[r,n]=[t.dataset.x,t.dataset.y];"User"===e?s.userPlayer.board.isShip([r,n])&&s.userPlayer.board.getShip([r,n]).isSunk()&&(t.style.backgroundColor="red"):s.computerPlayer.board.isShip([r,n])&&s.computerPlayer.board.getShip([r,n]).isSunk()&&(t.style.backgroundColor="red")}))}))},renderStart:()=>{const t=document.getElementById("startScreen");t.style.display="flex";const n=document.createElement("button");n.id="startBtn",n.textContent="Start Game",t.appendChild(n),document.getElementById("board").style.display="none",document.getElementById("switchTurnBtn").style.display="none",(()=>{const t=document.getElementById("startScreen");t.style.display="flex";const n=document.createElement("h3");n.textContent="Choose 5 Coordinates";for(let o=0;o<10;o++){const a=document.createElement("div");a.classList.add("rowDiv");for(let t=0;t<10;t++){const n=document.createElement("div");n.classList.add("selectCell"),a.appendChild(n),n.dataset.x=o,n.dataset.y=t,n.onmouseenter=e=>{n.style.backgroundColor="yellow";for(let e=1;e<5;e++){const n=r([o+e,t]);void 0!==n&&(n.style.backgroundColor="yellow")}},n.onmouseout=e=>{n.style.backgroundColor="";for(let e=1;e<5;e++){const n=r([o+e,t]);void 0!==n&&(n.style.backgroundColor="")}},n.onclick=a=>{let l=[[parseInt(n.dataset.x),parseInt(n.dataset.y)]];for(let e=1;e<5;e++){const n=r([o+e,t]);l.push([parseInt(n.dataset.x),parseInt(n.dataset.y)])}s.computerPlayer.board.placeShip(e(l)),console.log("placed")}}t.appendChild(a),t.appendChild(n)}})(),n.onclick=()=>{t.style.display="",document.getElementById("board").style.display="",document.getElementById("switchTurnBtn").style.display="",n.style.display="none"}},toggleTurnBtn:()=>{const e=document.getElementById("switchTurnBtn");e.disabled=!e.disabled}}})(),n=r,o=(()=>{const e=t("Computer"),r=t("User");let s=r;const a=e=>{e.board.ships.length>0&&e.board.ships.every((e=>e.isSunk()))&&alert(`${s.type} wins`)};return{initGame:()=>{r.board,e.board},switchTurn:()=>{console.log("start switch",o.currentPlayer.type),o.currentPlayer===r?o.currentPlayer=e:o.currentPlayer=r,console.log("end switch",o.currentPlayer.type)},computerPlayer:e,userPlayer:r,currentPlayer:s,checkLoss:a,moveEvent:t=>{n.stopClicks();const l="Computer"===t.dataset.board?e.board:r.board;l.receiveAttack([t.dataset.x,t.dataset.y]),n.attempt([t.dataset.x,t.dataset.y],l),n.styleSunk(l.type),a(s),o.switchTurn(),n.toggleTurnBtn()},computerMoveEvent:async()=>{n.stopClicks(),await(750,new Promise((e=>{setTimeout(e,750)}))),console.log("after 1 sec");const e=o.computerPlayer.generateMove(),t=o.computerPlayer.board;t.receiveAttack(e),n.attempt(e,t),n.styleSunk(t.type),o.checkLoss(o.currentPlayer),o.switchTurn(),n.toggleTurnBtn()}}})(),s=o;s.initGame();const a=document.getElementById("switchTurnBtn");n.renderBoard(s.currentPlayer.board),n.renderStart(),a.onclick=()=>{n.toggleTurnBtn(),n.renderBoard(s.currentPlayer.board),s.currentPlayer===s.computerPlayer?s.computerMoveEvent():n.startClicks()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,