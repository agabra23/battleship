(()=>{"use strict";const t=function(t){let e=0;const r=()=>{let e=0;return t.forEach((t=>{e++})),e};return{getLength:r,isSunk:()=>e>=r(),hit:()=>{e++},getHits:()=>e,getPath:()=>t,resetHits:()=>{e=0},hits:e}},e=e=>{const r=[],n=function(e){const r=[...Array(10)].map((t=>Array(10).fill("none"))),n=[],o=[];let s=[];const a=t=>{t.getPath().forEach((e=>{const[n,o]=e;r[n][o]=t})),c(t)},c=t=>{s.push(t)};return{placeShip:a,boardArray:r,receiveAttack:t=>{const[e,s]=t;let a,c=!1;a=n.some((e=>{const[r,n]=e;return r===t[0]&&n===t[1]})),c=o.some((e=>{const[r,n]=e;return r===t[0]&&n===t[1]})),"none"!==r[e][s]&&!1===a?(r[e][s].hit(),n.push(t)):"none"===r[e][s]&&!1===c&&o.push(t)},hits:n,misses:o,addShip:c,resetGameboard:()=>{n=[],o=[],s=[]},initBoard:()=>{a(t([[1,4],[1,5]])),a(t([[6,4],[6,5],[6,6]])),a(t([[4,2],[5,2],[6,2],[7,2]])),a(t([[8,3],[8,4],[8,5],[8,6],[8,7]])),a(t([[2,3],[2,4],[2,5],[2,6],[2,7]]))},isShip:t=>{const[e,n]=t;return"none"!==r[e][n]},getShip:t=>{const[e,n]=t;return r[e][n]},ships:s,type:e}}(e),o=t=>{r.push(t)};return"computer"===e?{attempt:o,generateMove:()=>{const t=t=>Math.floor(Math.random()*t),e=t=>r.some((e=>{const[r,n]=e;return r===t[0]&&n===t[1]}));let n=[t(9),t(9)];for(;e(n);)n=[t(9),t(9)];return n},board:n,type:e}:{attempt:o,board:n,type:e}},r=(()=>{const t=(t,e)=>{const[r,n]=t,o=document.getElementById(`${e.type} - ${r},${n}`),s=e.isShip(t);o.innerHTML=s?"Hit":"Miss"},e=t=>{t.classList.toggle("active")};return{renderBoard:e=>{const r=document.getElementById("board");r.innerHTML='<div id="overlay"></div>';const n=document.createElement("h3");console.log(e),n.innerHTML=`${e.type}'s Turn`,r.appendChild(n),e.boardArray.forEach(((t,n)=>{const s=document.createElement("div");s.classList.add("rowDiv"),t.forEach(((t,r)=>{const a=document.createElement("div");a.classList.add("boardCell"),a.id=`${e.type} - ${n},${r}`,a.dataset.board=e.type,a.dataset.x=n,a.dataset.y=r,"none"!==t&&(a.classList.add("shipCell"),t.isSunk()&&(a.style.backgroundColor="red")),a.addEventListener("click",(t=>{t.stopPropagation(),""===a.textContent&&o.moveEvent(a)})),s.appendChild(a)})),r.appendChild(s)})),e.misses.forEach((r=>{t(r,e)})),e.hits.forEach((r=>{t(r,e)}))},attempt:t,stopClicks:()=>{document.getElementById("overlay").style.pointerEvents="all"},startClicks:()=>{document.getElementById("overlay").style.pointerEvents="none"},styleSunk:t=>{document.querySelectorAll(".rowDiv").forEach((e=>{document.querySelectorAll(".boardCell").forEach((e=>{const[r,n]=[e.dataset.x,e.dataset.y];"User"===t?o.userPlayer.board.isShip([r,n])&&o.userPlayer.board.getShip([r,n]).isSunk()&&(e.style.backgroundColor="red"):o.computerPlayer.board.isShip([r,n])&&o.computerPlayer.board.getShip([r,n]).isSunk()&&(e.style.backgroundColor="red")}))}))},renderStart:()=>{const t=document.getElementById("startScreen");t.style.display="block";const r=document.createElement("button");r.id="startBtn",r.textContent="Start Game",t.appendChild(r),document.getElementById("board").style.display="none",document.getElementById("switchTurnBtn").style.display="none",r.onclick=()=>{e(t),document.getElementById("board").style.display="",document.getElementById("switchTurnBtn").style.display="",r.style.display="none"}}}})(),n=(()=>{const t=e("Computer"),o=e("User");let s=t;const a=t=>{t.board.ships.every((t=>t.isSunk()))&&alert("win")};return{initGame:()=>{const e=o.board;t.board.initBoard(),e.initBoard()},switchTurn:()=>{console.log("start switch",n.currentPlayer.type),n.currentPlayer===o?n.currentPlayer=t:n.currentPlayer=o,console.log("end switch",n.currentPlayer.type)},computerPlayer:t,userPlayer:o,currentPlayer:s,checkLoss:a,moveEvent:e=>{r.stopClicks();const c="Computer"===e.dataset.board?t.board:o.board;c.receiveAttack([e.dataset.x,e.dataset.y]),r.attempt([e.dataset.x,e.dataset.y],c),r.styleSunk(c.type),a(s),n.switchTurn()}}})(),o=n;o.initGame();const s=document.getElementById("switchTurnBtn");r.renderBoard(o.currentPlayer.board),r.renderStart(),s.onclick=()=>{r.startClicks(),r.renderBoard(o.currentPlayer.board)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFDbUIsYUFBdkIvQixFQUFLRSxRQUFRM0QsTUFDVHlFLEVBQWV6RSxNQUNmd0UsRUFBV3hFLE1BRWpCd0YsRUFBVXhFLGNBQWMsQ0FBQ3lDLEVBQUtFLFFBQVFoRCxFQUFHOEMsRUFBS0UsUUFBUS9DLElBQ3RELEVBQUdlLFFBQVEsQ0FBQzhCLEVBQUtFLFFBQVFoRCxFQUFHOEMsRUFBS0UsUUFBUS9DLEdBQUk0RSxHQUM3QyxFQUFHbkIsVUFBVW1CLEVBQVUxRixNQUN2Qm1GLEVBQVVELEdBQ1ZELEVBQUtRLFlBQVksRUFZcEIsRUF2RFksR0F5RGIsSUN6REEsRUFBS0YsV0FDTCxNQUFNSSxFQUFnQmxELFNBQVNDLGVBQWUsaUJBQzlDLEVBQUdLLFlBQVksRUFBS21DLGNBQWNoRixPQUNsQyxFQUFHMEUsY0FFSGUsRUFBY1gsUUFBVSxLQUN0QixFQUFHVixjQUVILEVBQUd2QixZQUFZLEVBQUttQyxjQUFjaEYsTUFBTSxDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL1NoaXAuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL1BsYXllci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvR2FtZWJvYXJkLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvbW9kdWxlcy9VSS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvZ2FtZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNoaXAgPSBmdW5jdGlvbiAocGF0aCkge1xuICBsZXQgaGl0cyA9IDA7XG5cbiAgY29uc3QgZ2V0SGl0cyA9ICgpID0+IHtcbiAgICByZXR1cm4gaGl0cztcbiAgfTtcblxuICBjb25zdCBoaXQgPSAoKSA9PiB7XG4gICAgaGl0cysrO1xuICB9O1xuXG4gIGNvbnN0IGdldExlbmd0aCA9ICgpID0+IHtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIHBhdGguZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgY291bnQrKztcbiAgICB9KTtcbiAgICByZXR1cm4gY291bnQ7XG4gIH07XG5cbiAgY29uc3QgaXNTdW5rID0gKCkgPT4ge1xuICAgIHJldHVybiBoaXRzID49IGdldExlbmd0aCgpO1xuICB9O1xuXG4gIGNvbnN0IGdldFBhdGggPSAoKSA9PiB7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH07XG5cbiAgY29uc3QgcmVzZXRIaXRzID0gKCkgPT4ge1xuICAgIGhpdHMgPSAwO1xuICB9O1xuXG4gIHJldHVybiB7IGdldExlbmd0aCwgaXNTdW5rLCBoaXQsIGdldEhpdHMsIGdldFBhdGgsIHJlc2V0SGl0cywgaGl0cyB9O1xufTtcbmV4cG9ydCBkZWZhdWx0IFNoaXA7XG4iLCJpbXBvcnQgR2FtZWJvYXJkIGZyb20gXCIuL0dhbWVib2FyZFwiO1xuXG5jb25zdCBQbGF5ZXIgPSAodHlwZSkgPT4ge1xuICBjb25zdCBhdHRlbXB0cyA9IFtdO1xuICBjb25zdCB0dXJuID0gZmFsc2U7XG4gIGNvbnN0IGJvYXJkID0gR2FtZWJvYXJkKHR5cGUpO1xuXG4gIGNvbnN0IGF0dGVtcHQgPSAoY29vcmRpbmF0ZXMpID0+IHtcbiAgICBhdHRlbXB0cy5wdXNoKGNvb3JkaW5hdGVzKTtcbiAgfTtcblxuICBjb25zdCBnZW5lcmF0ZU1vdmUgPSAoKSA9PiB7XG4gICAgY29uc3QgZ2V0UmFuZG9tSW50ID0gKG1heCkgPT4ge1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG1heCk7XG4gICAgfTtcblxuICAgIGNvbnN0IGNoZWNrQXR0ZW1wdGVkID0gKGF0dGVtcHQpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF0dGVtcHRzLnNvbWUoKGNvb3JkaW5hdGUpID0+IHtcbiAgICAgICAgY29uc3QgW3gsIHldID0gY29vcmRpbmF0ZTtcblxuICAgICAgICByZXR1cm4geCA9PT0gYXR0ZW1wdFswXSAmJiB5ID09PSBhdHRlbXB0WzFdO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIGxldCBtb3ZlID0gW2dldFJhbmRvbUludCg5KSwgZ2V0UmFuZG9tSW50KDkpXTtcblxuICAgIHdoaWxlIChjaGVja0F0dGVtcHRlZChtb3ZlKSkge1xuICAgICAgbW92ZSA9IFtnZXRSYW5kb21JbnQoOSksIGdldFJhbmRvbUludCg5KV07XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vdmU7XG4gIH07XG5cbiAgaWYgKHR5cGUgPT09IFwiY29tcHV0ZXJcIikgcmV0dXJuIHsgYXR0ZW1wdCwgZ2VuZXJhdGVNb3ZlLCBib2FyZCwgdHlwZSB9O1xuXG4gIHJldHVybiB7IGF0dGVtcHQsIGJvYXJkLCB0eXBlIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQbGF5ZXI7XG4iLCJpbXBvcnQgU2hpcCBmcm9tIFwiLi9TaGlwLmpzXCI7XG5cbmNvbnN0IEdhbWVib2FyZCA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gIGNvbnN0IGJvYXJkQXJyYXkgPSBbLi4uQXJyYXkoMTApXS5tYXAoKGUpID0+IEFycmF5KDEwKS5maWxsKFwibm9uZVwiKSk7XG4gIGNvbnN0IGhpdHMgPSBbXTtcbiAgY29uc3QgbWlzc2VzID0gW107XG4gIGxldCBzaGlwcyA9IFtdO1xuXG4gIGNvbnN0IGluaXRCb2FyZCA9ICgpID0+IHtcbiAgICBwbGFjZVNoaXAoXG4gICAgICBTaGlwKFtcbiAgICAgICAgWzEsIDRdLFxuICAgICAgICBbMSwgNV0sXG4gICAgICBdKVxuICAgICk7XG4gICAgcGxhY2VTaGlwKFxuICAgICAgU2hpcChbXG4gICAgICAgIFs2LCA0XSxcbiAgICAgICAgWzYsIDVdLFxuICAgICAgICBbNiwgNl0sXG4gICAgICBdKVxuICAgICk7XG4gICAgcGxhY2VTaGlwKFxuICAgICAgU2hpcChbXG4gICAgICAgIFs0LCAyXSxcbiAgICAgICAgWzUsIDJdLFxuICAgICAgICBbNiwgMl0sXG4gICAgICAgIFs3LCAyXSxcbiAgICAgIF0pXG4gICAgKTtcblxuICAgIHBsYWNlU2hpcChcbiAgICAgIFNoaXAoW1xuICAgICAgICBbOCwgM10sXG4gICAgICAgIFs4LCA0XSxcbiAgICAgICAgWzgsIDVdLFxuICAgICAgICBbOCwgNl0sXG4gICAgICAgIFs4LCA3XSxcbiAgICAgIF0pXG4gICAgKTtcbiAgICBwbGFjZVNoaXAoXG4gICAgICBTaGlwKFtcbiAgICAgICAgWzIsIDNdLFxuICAgICAgICBbMiwgNF0sXG4gICAgICAgIFsyLCA1XSxcbiAgICAgICAgWzIsIDZdLFxuICAgICAgICBbMiwgN10sXG4gICAgICBdKVxuICAgICk7XG4gIH07XG5cbiAgY29uc3QgcmVzZXRHYW1lYm9hcmQgPSAoKSA9PiB7XG4gICAgaGl0cyA9IFtdO1xuICAgIG1pc3NlcyA9IFtdO1xuICAgIHNoaXBzID0gW107XG4gIH07XG5cbiAgY29uc3QgcGxhY2VTaGlwID0gKHNoaXBPYmplY3QpID0+IHtcbiAgICBjb25zdCBwYXRoID0gc2hpcE9iamVjdC5nZXRQYXRoKCk7XG4gICAgcGF0aC5mb3JFYWNoKChjb29yZGluYXRlcykgPT4ge1xuICAgICAgY29uc3QgW3gsIHldID0gY29vcmRpbmF0ZXM7XG4gICAgICBib2FyZEFycmF5W3hdW3ldID0gc2hpcE9iamVjdDtcbiAgICB9KTtcbiAgICBhZGRTaGlwKHNoaXBPYmplY3QpO1xuICB9O1xuXG4gIGNvbnN0IHJlY2VpdmVBdHRhY2sgPSAoY29vcmRpbmF0ZXMpID0+IHtcbiAgICBjb25zdCBbeCwgeV0gPSBjb29yZGluYXRlcztcblxuICAgIGxldCBhbHJlYWR5SGl0LFxuICAgICAgYWxyZWFkeU1pc3MgPSBmYWxzZTtcblxuICAgIGFscmVhZHlIaXQgPSBoaXRzLnNvbWUoKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IFt4SXRlbSwgeUl0ZW1dID0gaXRlbTtcbiAgICAgIHJldHVybiB4SXRlbSA9PT0gY29vcmRpbmF0ZXNbMF0gJiYgeUl0ZW0gPT09IGNvb3JkaW5hdGVzWzFdO1xuICAgIH0pO1xuICAgIGFscmVhZHlNaXNzID0gbWlzc2VzLnNvbWUoKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IFt4SXRlbSwgeUl0ZW1dID0gaXRlbTtcbiAgICAgIHJldHVybiB4SXRlbSA9PT0gY29vcmRpbmF0ZXNbMF0gJiYgeUl0ZW0gPT09IGNvb3JkaW5hdGVzWzFdO1xuICAgIH0pO1xuXG4gICAgaWYgKGJvYXJkQXJyYXlbeF1beV0gIT09IFwibm9uZVwiICYmIGFscmVhZHlIaXQgPT09IGZhbHNlKSB7XG4gICAgICBib2FyZEFycmF5W3hdW3ldLmhpdCgpO1xuICAgICAgaGl0cy5wdXNoKGNvb3JkaW5hdGVzKTtcbiAgICB9IGVsc2UgaWYgKGJvYXJkQXJyYXlbeF1beV0gPT09IFwibm9uZVwiICYmIGFscmVhZHlNaXNzID09PSBmYWxzZSkge1xuICAgICAgbWlzc2VzLnB1c2goY29vcmRpbmF0ZXMpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBhZGRTaGlwID0gKHNoaXApID0+IHtcbiAgICBzaGlwcy5wdXNoKHNoaXApO1xuICB9O1xuXG4gIGNvbnN0IGlzU2hpcCA9IChjb29yZGluYXRlcykgPT4ge1xuICAgIGNvbnN0IFt4LCB5XSA9IGNvb3JkaW5hdGVzO1xuXG4gICAgcmV0dXJuIGJvYXJkQXJyYXlbeF1beV0gIT09IFwibm9uZVwiO1xuICB9O1xuXG4gIGNvbnN0IGdldFNoaXAgPSAoY29vcmRpbmF0ZXMpID0+IHtcbiAgICBjb25zdCBbeCwgeV0gPSBjb29yZGluYXRlcztcblxuICAgIHJldHVybiBib2FyZEFycmF5W3hdW3ldO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgcGxhY2VTaGlwLFxuICAgIGJvYXJkQXJyYXksXG4gICAgcmVjZWl2ZUF0dGFjayxcbiAgICBoaXRzLFxuICAgIG1pc3NlcyxcbiAgICBhZGRTaGlwLFxuICAgIHJlc2V0R2FtZWJvYXJkLFxuICAgIGluaXRCb2FyZCxcbiAgICBpc1NoaXAsXG4gICAgZ2V0U2hpcCxcbiAgICBzaGlwcyxcbiAgICB0eXBlLFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgR2FtZWJvYXJkO1xuIiwiaW1wb3J0IEdhbWVib2FyZCBmcm9tIFwiLi9HYW1lYm9hcmRcIjtcbmltcG9ydCBQbGF5ZXIgZnJvbSBcIi4vUGxheWVyXCI7XG5pbXBvcnQgU2hpcCBmcm9tIFwiLi9TaGlwXCI7XG5pbXBvcnQgZ2FtZSBmcm9tIFwiLi9nYW1lXCI7XG5cbmNvbnN0IFVJID0gKCgpID0+IHtcbiAgY29uc3QgcmVuZGVyU3RhcnQgPSAoKSA9PiB7XG4gICAgY29uc3Qgc3RhcnRTY3JlZW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0YXJ0U2NyZWVuXCIpO1xuICAgIHN0YXJ0U2NyZWVuLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cbiAgICBjb25zdCBzdGFydEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgc3RhcnRCdXR0b24uaWQgPSBcInN0YXJ0QnRuXCI7XG4gICAgc3RhcnRCdXR0b24udGV4dENvbnRlbnQgPSBcIlN0YXJ0IEdhbWVcIjtcblxuICAgIHN0YXJ0U2NyZWVuLmFwcGVuZENoaWxkKHN0YXJ0QnV0dG9uKTtcblxuICAgIGNvbnN0IGJvYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJib2FyZFwiKTtcbiAgICBib2FyZC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cbiAgICBjb25zdCBuZXh0VHVybkJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3dpdGNoVHVybkJ0blwiKTtcbiAgICBuZXh0VHVybkJ0bi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cbiAgICBzdGFydEJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgc3RhcnRFdmVudChzdGFydFNjcmVlbik7XG4gICAgICBzdGFydEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgfTtcbiAgfTtcblxuICBjb25zdCBzdGFydEV2ZW50ID0gKGVsZW1lbnQpID0+IHtcbiAgICB0b2dnbGVBY3RpdmUoZWxlbWVudCk7XG5cbiAgICBjb25zdCBib2FyZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYm9hcmRcIik7XG4gICAgYm9hcmQuc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cbiAgICBjb25zdCBuZXh0VHVybkJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3dpdGNoVHVybkJ0blwiKTtcbiAgICBuZXh0VHVybkJ0bi5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcbiAgfTtcblxuICBjb25zdCByZW5kZXJCb2FyZCA9IChwbGF5ZXJCb2FyZCkgPT4ge1xuICAgIGNvbnN0IGJvYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJib2FyZFwiKTtcbiAgICBib2FyZC5pbm5lckhUTUwgPSBgPGRpdiBpZD1cIm92ZXJsYXlcIj48L2Rpdj5gO1xuXG4gICAgY29uc3QgcGxheWVyVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDNcIik7XG4gICAgY29uc29sZS5sb2cocGxheWVyQm9hcmQpO1xuICAgIHBsYXllclRpdGxlLmlubmVySFRNTCA9IGAke3BsYXllckJvYXJkLnR5cGV9J3MgVHVybmA7XG5cbiAgICBib2FyZC5hcHBlbmRDaGlsZChwbGF5ZXJUaXRsZSk7XG5cbiAgICBwbGF5ZXJCb2FyZC5ib2FyZEFycmF5LmZvckVhY2goKHJvdywgcm93SW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHJvd0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICByb3dEaXYuY2xhc3NMaXN0LmFkZChcInJvd0RpdlwiKTtcblxuICAgICAgcm93LmZvckVhY2goKGl0ZW0sIGNlbGxJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKFwiYm9hcmRDZWxsXCIpO1xuICAgICAgICBjZWxsLmlkID0gYCR7cGxheWVyQm9hcmQudHlwZX0gLSAke3Jvd0luZGV4fSwke2NlbGxJbmRleH1gO1xuICAgICAgICBjZWxsLmRhdGFzZXQuYm9hcmQgPSBwbGF5ZXJCb2FyZC50eXBlO1xuICAgICAgICBjZWxsLmRhdGFzZXQueCA9IHJvd0luZGV4O1xuICAgICAgICBjZWxsLmRhdGFzZXQueSA9IGNlbGxJbmRleDtcbiAgICAgICAgaWYgKGl0ZW0gIT09IFwibm9uZVwiKSB7XG4gICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKFwic2hpcENlbGxcIik7XG5cbiAgICAgICAgICBpZiAoaXRlbS5pc1N1bmsoKSkge1xuICAgICAgICAgICAgY2VsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgICAgICAgLy8gYWRqdXN0IHRoaXMuIE1heWJlIG1ha2UgaXQgYSBwbGF5Um91bmQgdGhpbmcgdG8ga2ljayBvZmYgYSByb3VuZCBhbmQgZW5kIGl0IHdpdGggYSB0dXJuIHN3aXRjaC5cbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIGlmIChjZWxsLnRleHRDb250ZW50ID09PSBcIlwiKSBnYW1lLm1vdmVFdmVudChjZWxsKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcm93RGl2LmFwcGVuZENoaWxkKGNlbGwpO1xuICAgICAgfSk7XG5cbiAgICAgIGJvYXJkLmFwcGVuZENoaWxkKHJvd0Rpdik7XG4gICAgfSk7XG5cbiAgICBwbGF5ZXJCb2FyZC5taXNzZXMuZm9yRWFjaCgoY29vcmRpbmF0ZXMpID0+IHtcbiAgICAgIGF0dGVtcHQoY29vcmRpbmF0ZXMsIHBsYXllckJvYXJkKTtcbiAgICB9KTtcbiAgICBwbGF5ZXJCb2FyZC5oaXRzLmZvckVhY2goKGNvb3JkaW5hdGVzKSA9PiB7XG4gICAgICBhdHRlbXB0KGNvb3JkaW5hdGVzLCBwbGF5ZXJCb2FyZCk7XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgYXR0ZW1wdCA9IChjb29yZGluYXRlcywgZ2FtZWJvYXJkKSA9PiB7XG4gICAgY29uc3QgW3gsIHldID0gY29vcmRpbmF0ZXM7XG4gICAgY29uc3QgdGFyZ2V0Q2VsbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke2dhbWVib2FyZC50eXBlfSAtICR7eH0sJHt5fWApO1xuICAgIGNvbnN0IGlzU2hpcCA9IGdhbWVib2FyZC5pc1NoaXAoY29vcmRpbmF0ZXMpO1xuXG4gICAgaWYgKGlzU2hpcCkge1xuICAgICAgdGFyZ2V0Q2VsbC5pbm5lckhUTUwgPSBcIkhpdFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXRDZWxsLmlubmVySFRNTCA9IFwiTWlzc1wiO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBzdG9wQ2xpY2tzID0gKCkgPT4ge1xuICAgIGNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm92ZXJsYXlcIik7XG5cbiAgICBvdmVybGF5LnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcImFsbFwiO1xuICB9O1xuXG4gIGNvbnN0IHN0YXJ0Q2xpY2tzID0gKCkgPT4ge1xuICAgIGNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm92ZXJsYXlcIik7XG5cbiAgICBvdmVybGF5LnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcIm5vbmVcIjtcbiAgfTtcblxuICBjb25zdCBzdHlsZVN1bmsgPSAoYm9hcmRUeXBlKSA9PiB7XG4gICAgY29uc3Qgcm93cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucm93RGl2XCIpO1xuICAgIHJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG4gICAgICBjb25zdCBjZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYm9hcmRDZWxsXCIpO1xuICAgICAgY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICBjb25zdCBbeCwgeV0gPSBbY2VsbC5kYXRhc2V0LngsIGNlbGwuZGF0YXNldC55XTtcblxuICAgICAgICBpZiAoYm9hcmRUeXBlID09PSBcIlVzZXJcIikge1xuICAgICAgICAgIGlmIChnYW1lLnVzZXJQbGF5ZXIuYm9hcmQuaXNTaGlwKFt4LCB5XSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHNoaXAgPSBnYW1lLnVzZXJQbGF5ZXIuYm9hcmQuZ2V0U2hpcChbeCwgeV0pO1xuICAgICAgICAgICAgaWYgKHNoaXAuaXNTdW5rKCkpIGNlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGdhbWUuY29tcHV0ZXJQbGF5ZXIuYm9hcmQuaXNTaGlwKFt4LCB5XSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHNoaXAgPSBnYW1lLmNvbXB1dGVyUGxheWVyLmJvYXJkLmdldFNoaXAoW3gsIHldKTtcbiAgICAgICAgICAgIGlmIChzaGlwLmlzU3VuaygpKSBjZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCB0b2dnbGVBY3RpdmUgPSAoZWxlbWVudCkgPT4ge1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcImFjdGl2ZVwiKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHJlbmRlckJvYXJkLFxuICAgIGF0dGVtcHQsXG4gICAgc3RvcENsaWNrcyxcbiAgICBzdGFydENsaWNrcyxcbiAgICBzdHlsZVN1bmssXG4gICAgcmVuZGVyU3RhcnQsXG4gIH07XG59KSgpO1xuXG5leHBvcnQgZGVmYXVsdCBVSTtcbiIsImltcG9ydCBHYW1lYm9hcmQgZnJvbSBcIi4vR2FtZWJvYXJkXCI7XG5pbXBvcnQgU2hpcCBmcm9tIFwiLi9TaGlwXCI7XG5pbXBvcnQgUGxheWVyIGZyb20gXCIuL1BsYXllclwiO1xuaW1wb3J0IFVJIGZyb20gXCIuL1VJXCI7XG5cbmNvbnN0IGdhbWUgPSAoKCkgPT4ge1xuICBjb25zdCBjb21wdXRlclBsYXllciA9IFBsYXllcihcIkNvbXB1dGVyXCIpO1xuICBjb25zdCB1c2VyUGxheWVyID0gUGxheWVyKFwiVXNlclwiKTtcblxuICBsZXQgY3VycmVudFBsYXllciA9IGNvbXB1dGVyUGxheWVyO1xuXG4gIGNvbnN0IGluaXRHYW1lID0gKCkgPT4ge1xuICAgIGNvbnN0IHVzZXJCb2FyZCA9IHVzZXJQbGF5ZXIuYm9hcmQ7XG4gICAgY29uc3QgY29tcHV0ZXJCb2FyZCA9IGNvbXB1dGVyUGxheWVyLmJvYXJkO1xuICAgIGNvbXB1dGVyQm9hcmQuaW5pdEJvYXJkKCk7XG4gICAgdXNlckJvYXJkLmluaXRCb2FyZCgpO1xuICB9O1xuXG4gIGNvbnN0IHN3aXRjaFR1cm4gPSAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJzdGFydCBzd2l0Y2hcIiwgZ2FtZS5jdXJyZW50UGxheWVyLnR5cGUpO1xuICAgIGlmIChnYW1lLmN1cnJlbnRQbGF5ZXIgPT09IHVzZXJQbGF5ZXIpIHtcbiAgICAgIGdhbWUuY3VycmVudFBsYXllciA9IGNvbXB1dGVyUGxheWVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBnYW1lLmN1cnJlbnRQbGF5ZXIgPSB1c2VyUGxheWVyO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKFwiZW5kIHN3aXRjaFwiLCBnYW1lLmN1cnJlbnRQbGF5ZXIudHlwZSk7XG4gIH07XG5cbiAgY29uc3QgY2hlY2tMb3NzID0gKHBsYXllcikgPT4ge1xuICAgIGNvbnN0IGFsbFN1bmsgPSBwbGF5ZXIuYm9hcmQuc2hpcHMuZXZlcnkoKHNoaXApID0+IHtcbiAgICAgIHJldHVybiBzaGlwLmlzU3VuaygpO1xuICAgIH0pO1xuXG4gICAgaWYgKGFsbFN1bmspIGFsZXJ0KFwid2luXCIpO1xuICB9O1xuXG4gIGNvbnN0IG1vdmVFdmVudCA9IChjZWxsKSA9PiB7XG4gICAgVUkuc3RvcENsaWNrcygpO1xuICAgIGNvbnN0IGNlbGxCb2FyZCA9XG4gICAgICBjZWxsLmRhdGFzZXQuYm9hcmQgPT09IFwiQ29tcHV0ZXJcIlxuICAgICAgICA/IGNvbXB1dGVyUGxheWVyLmJvYXJkXG4gICAgICAgIDogdXNlclBsYXllci5ib2FyZDtcblxuICAgIGNlbGxCb2FyZC5yZWNlaXZlQXR0YWNrKFtjZWxsLmRhdGFzZXQueCwgY2VsbC5kYXRhc2V0LnldKTtcbiAgICBVSS5hdHRlbXB0KFtjZWxsLmRhdGFzZXQueCwgY2VsbC5kYXRhc2V0LnldLCBjZWxsQm9hcmQpO1xuICAgIFVJLnN0eWxlU3VuayhjZWxsQm9hcmQudHlwZSk7XG4gICAgY2hlY2tMb3NzKGN1cnJlbnRQbGF5ZXIpO1xuICAgIGdhbWUuc3dpdGNoVHVybigpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgaW5pdEdhbWUsXG4gICAgc3dpdGNoVHVybixcbiAgICBjb21wdXRlclBsYXllcixcbiAgICB1c2VyUGxheWVyLFxuICAgIGN1cnJlbnRQbGF5ZXIsXG4gICAgY2hlY2tMb3NzLFxuICAgIG1vdmVFdmVudCxcbiAgfTtcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGdhbWU7XG4iLCJpbXBvcnQgR2FtZWJvYXJkIGZyb20gXCIuL21vZHVsZXMvR2FtZWJvYXJkLmpzXCI7XG5pbXBvcnQgU2hpcCBmcm9tIFwiLi9tb2R1bGVzL1NoaXAuanNcIjtcbmltcG9ydCBnYW1lIGZyb20gXCIuL21vZHVsZXMvZ2FtZS5qc1wiO1xuaW1wb3J0IFVJIGZyb20gXCIuL21vZHVsZXMvVUkuanNcIjtcblxuZ2FtZS5pbml0R2FtZSgpO1xuY29uc3Qgc3dpdGNoVHVybkJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3dpdGNoVHVybkJ0blwiKTtcblVJLnJlbmRlckJvYXJkKGdhbWUuY3VycmVudFBsYXllci5ib2FyZCk7XG5VSS5yZW5kZXJTdGFydCgpO1xuXG5zd2l0Y2hUdXJuQnRuLm9uY2xpY2sgPSAoKSA9PiB7XG4gIFVJLnN0YXJ0Q2xpY2tzKCk7XG5cbiAgVUkucmVuZGVyQm9hcmQoZ2FtZS5jdXJyZW50UGxheWVyLmJvYXJkKTtcbn07XG4iXSwibmFtZXMiOlsicGF0aCIsImhpdHMiLCJnZXRMZW5ndGgiLCJjb3VudCIsImZvckVhY2giLCJlbGVtZW50IiwiaXNTdW5rIiwiaGl0IiwiZ2V0SGl0cyIsImdldFBhdGgiLCJyZXNldEhpdHMiLCJ0eXBlIiwiYXR0ZW1wdHMiLCJib2FyZCIsImJvYXJkQXJyYXkiLCJBcnJheSIsIm1hcCIsImUiLCJmaWxsIiwibWlzc2VzIiwic2hpcHMiLCJwbGFjZVNoaXAiLCJzaGlwT2JqZWN0IiwiY29vcmRpbmF0ZXMiLCJ4IiwieSIsImFkZFNoaXAiLCJzaGlwIiwicHVzaCIsInJlY2VpdmVBdHRhY2siLCJhbHJlYWR5SGl0IiwiYWxyZWFkeU1pc3MiLCJzb21lIiwiaXRlbSIsInhJdGVtIiwieUl0ZW0iLCJyZXNldEdhbWVib2FyZCIsImluaXRCb2FyZCIsImlzU2hpcCIsImdldFNoaXAiLCJhdHRlbXB0IiwiZ2VuZXJhdGVNb3ZlIiwiZ2V0UmFuZG9tSW50IiwibWF4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiY2hlY2tBdHRlbXB0ZWQiLCJjb29yZGluYXRlIiwibW92ZSIsImdhbWVib2FyZCIsInRhcmdldENlbGwiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwidG9nZ2xlQWN0aXZlIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwicmVuZGVyQm9hcmQiLCJwbGF5ZXJCb2FyZCIsInBsYXllclRpdGxlIiwiY3JlYXRlRWxlbWVudCIsImNvbnNvbGUiLCJsb2ciLCJhcHBlbmRDaGlsZCIsInJvdyIsInJvd0luZGV4Iiwicm93RGl2IiwiYWRkIiwiY2VsbEluZGV4IiwiY2VsbCIsImlkIiwiZGF0YXNldCIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsInN0b3BQcm9wYWdhdGlvbiIsInRleHRDb250ZW50IiwibW92ZUV2ZW50Iiwic3RvcENsaWNrcyIsInBvaW50ZXJFdmVudHMiLCJzdGFydENsaWNrcyIsInN0eWxlU3VuayIsImJvYXJkVHlwZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ1c2VyUGxheWVyIiwiY29tcHV0ZXJQbGF5ZXIiLCJyZW5kZXJTdGFydCIsInN0YXJ0U2NyZWVuIiwiZGlzcGxheSIsInN0YXJ0QnV0dG9uIiwib25jbGljayIsImdhbWUiLCJjdXJyZW50UGxheWVyIiwiY2hlY2tMb3NzIiwicGxheWVyIiwiZXZlcnkiLCJhbGVydCIsImluaXRHYW1lIiwidXNlckJvYXJkIiwic3dpdGNoVHVybiIsImNlbGxCb2FyZCIsInN3aXRjaFR1cm5CdG4iXSwic291cmNlUm9vdCI6IiJ9