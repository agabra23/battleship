(()=>{"use strict";const e=function(e){let t=0;const n=()=>{let t=0;return e.forEach((e=>{t++})),t};return{getLength:n,isSunk:()=>t>=n(),hit:()=>{t++},getHits:()=>t,getPath:()=>e,resetHits:()=>{t=0},hits:t}},t=t=>{const n=[],o=function(t){const n=[...Array(10)].map((e=>Array(10).fill("none"))),o=[],r=[];let s=[];const a=e=>{e.getPath().forEach((t=>{const[o,r]=t;n[o][r]=e})),l(e)},l=e=>{s.push(e)};return{placeShip:a,boardArray:n,receiveAttack:e=>{const[t,s]=e;let a,l=!1;a=o.some((t=>{const[n,o]=t;return n===e[0]&&o===e[1]})),l=r.some((t=>{const[n,o]=t;return n===e[0]&&o===e[1]})),"none"!==n[t][s]&&!1===a?(n[t][s].hit(),o.push(e)):"none"===n[t][s]&&!1===l&&r.push(e)},hits:o,misses:r,addShip:l,resetGameboard:()=>{o=[],r=[],s=[]},initBoard:()=>{a(e([[1,4],[1,5]])),a(e([[6,4],[6,5],[6,6]])),a(e([[4,2],[5,2],[6,2],[7,2]])),a(e([[8,3],[8,4],[8,5],[8,6],[8,7]]))},isShip:e=>{const[t,o]=e;return"none"!==n[t][o]},getShip:e=>{const[t,o]=e;return n[t][o]},ships:s,type:t}}(t),r=e=>{n.push(e)};return{attempt:r,board:o,type:t,generateMove:()=>{const e=e=>Math.floor(Math.random()*e),t=e=>n.some((t=>{const[n,o]=t;return n===e[0]&&o===e[1]}));let o=[e(9),e(9)];for(;t(o);)o=[e(9),e(9)];return r(o),o}}},n=(()=>{const t=(e,t)=>{const[n,o]=e,r=document.getElementById(`${t.type} - ${n},${o}`),s=t.isShip(e);r.innerHTML=s?"Hit":"Miss"};let n=!0;const o=[2,3,4,5];let r=5;const a=()=>{const e=document.getElementById("chooseShip");o.find((e=>e===r-1))?(r--,e.textContent=`Choose ${r} Coordinates`):(document.querySelectorAll(".selectCell").forEach((e=>{e.style.pointerEvents="none"})),e.textContent='Click "Start Game" to Begin.')},l=e=>{const[t,n]=e,o=document.querySelectorAll(".selectCell");for(const e of o)if(parseInt(e.dataset.x)===t&&parseInt(e.dataset.y)===n)return e},c=()=>{n=!n};return{renderBoard:e=>{const n=document.getElementById("board");n.innerHTML='<div id="overlay"></div>';const o=document.createElement("h3");console.log(e),o.innerHTML=`${e.type}'s Turn`,n.appendChild(o),e.boardArray.forEach(((t,o)=>{const r=document.createElement("div");r.classList.add("rowDiv"),t.forEach(((t,n)=>{const a=document.createElement("div");a.classList.add("boardCell"),a.id=`${e.type} - ${o},${n}`,a.dataset.board=e.type,a.dataset.x=o,a.dataset.y=n,e===s.computerPlayer.board&&"none"!==t&&a.classList.add("selected"),"none"!==t&&(a.classList.add("shipCell"),t.isSunk()&&(a.style.backgroundColor="red")),a.addEventListener("click",(e=>{e.stopPropagation(),""===a.textContent&&s.moveEvent(a)})),r.appendChild(a)})),n.appendChild(r)})),e.misses.forEach((n=>{t(n,e)})),e.hits.forEach((n=>{t(n,e)}))},attempt:t,stopClicks:()=>{document.getElementById("overlay").style.pointerEvents="all"},startClicks:()=>{document.getElementById("overlay").style.pointerEvents="none"},styleSunk:e=>{document.querySelectorAll(".rowDiv").forEach((t=>{document.querySelectorAll(".boardCell").forEach((t=>{const[n,o]=[t.dataset.x,t.dataset.y];"User"===e?s.userPlayer.board.isShip([n,o])&&s.userPlayer.board.getShip([n,o]).isSunk()&&(t.style.backgroundColor="red"):s.computerPlayer.board.isShip([n,o])&&s.computerPlayer.board.getShip([n,o]).isSunk()&&(t.style.backgroundColor="red")}))}))},renderStart:()=>{document.getElementById("startScreen").style.display="flex",document.getElementById("board").style.display="none",document.getElementById("switchTurnBtn").style.display="none",(()=>{const t=document.getElementById("startScreen");t.style.display="flex";const o=document.createElement("button");o.textContent="Flip Ship Direction",o.id="flipBtn";const d=document.createElement("button");d.id="startBtn",d.textContent="Start Game";const i=document.createElement("h3");i.textContent=`Choose ${r} Coordinates`,i.id="chooseShip";for(let u=0;u<10;u++){const y=document.createElement("div");y.classList.add("rowDiv");for(let t=0;t<10;t++){const o=document.createElement("div");o.classList.add("selectCell"),y.appendChild(o),o.dataset.x=u,o.dataset.y=t,o.onmouseenter=e=>{o.style.backgroundColor="yellow";for(let e=1;e<r;e++){let o=l([u,t+e]);n&&(o=l([u+e,t])),void 0!==o&&(o.style.backgroundColor="yellow")}},o.onmouseout=e=>{o.style.backgroundColor="";for(let e=1;e<r;e++){let o=l([u,t+e]);n&&(o=l([u+e,t])),void 0!==o&&(o.style.backgroundColor="")}},o.onclick=c=>{let d=[[parseInt(o.dataset.x),parseInt(o.dataset.y)]];o.classList.add("selected");for(let e=1;e<r;e++){let o=l([u,t+e]);n&&(o=l([u+e,t])),o.classList.add("selected"),console.log(o.style.backgroundColor),d.push([parseInt(o.dataset.x),parseInt(o.dataset.y)])}s.computerPlayer.board.placeShip(e(d)),console.log("placed"),a()}}t.appendChild(y),t.appendChild(i),t.appendChild(o),t.appendChild(d),d.onclick=()=>{t.style.display="",document.getElementById("board").style.display="",document.getElementById("switchTurnBtn").style.display="",d.style.display="none"},o.onclick=c}})()},toggleTurnBtn:()=>{const e=document.getElementById("switchTurnBtn");e.disabled=!e.disabled}}})(),o=n,r=(()=>{const e=t("Computer"),n=t("User");let s=n;const a=e=>{e.board.ships.length>0&&e.board.ships.every((e=>e.isSunk()))&&alert(`${s.type} wins`)};return{initGame:()=>{n.board,e.board},switchTurn:()=>{console.log("start switch",r.currentPlayer.type),r.currentPlayer===n?r.currentPlayer=e:r.currentPlayer=n,console.log("end switch",r.currentPlayer.type)},computerPlayer:e,userPlayer:n,currentPlayer:s,checkLoss:a,moveEvent:t=>{o.stopClicks();const l="Computer"===t.dataset.board?e.board:n.board;l.receiveAttack([t.dataset.x,t.dataset.y]),o.attempt([t.dataset.x,t.dataset.y],l),o.styleSunk(l.type),a(s),r.switchTurn(),o.toggleTurnBtn()},computerMoveEvent:async()=>{o.stopClicks(),await(750,new Promise((e=>{setTimeout(e,750)}))),console.log("after 1 sec");const e=r.computerPlayer.generateMove(),t=r.computerPlayer.board;t.receiveAttack(e),o.attempt(e,t),o.styleSunk(t.type),r.checkLoss(r.currentPlayer),r.switchTurn(),o.toggleTurnBtn()}}})(),s=r;s.initGame();const a=document.getElementById("switchTurnBtn");o.renderBoard(s.currentPlayer.board),o.renderStart(),a.onclick=()=>{o.toggleTurnBtn(),o.renderBoard(s.currentPlayer.board),s.currentPlayer===s.computerPlayer?s.computerMoveEvent():o.startClicks()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,