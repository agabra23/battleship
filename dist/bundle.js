(()=>{"use strict";const e=function(e){let t=0;const r=()=>{let t=0;return e.forEach((e=>{t++})),t};return{getLength:r,isSunk:()=>t>=r(),hit:()=>{t++},getHits:()=>t,getPath:()=>e,resetHits:()=>{t=0},hits:t}},t=t=>{const r=[],n=function(t){const r=[...Array(10)].map((e=>Array(10).fill("none"))),n=[],o=[];let s=[];const a=e=>{e.getPath().forEach((t=>{const[n,o]=t;r[n][o]=e})),l(e)},l=e=>{s.push(e)};return{placeShip:a,boardArray:r,receiveAttack:e=>{const[t,s]=e;let a,l=!1;a=n.some((t=>{const[r,n]=t;return r===e[0]&&n===e[1]})),l=o.some((t=>{const[r,n]=t;return r===e[0]&&n===e[1]})),"none"!==r[t][s]&&!1===a?(r[t][s].hit(),n.push(e)):"none"===r[t][s]&&!1===l&&o.push(e)},hits:n,misses:o,addShip:l,resetGameboard:()=>{n=[],o=[],s=[]},initBoard:()=>{a(e([[1,4],[1,5]])),a(e([[6,4],[6,5],[6,6]])),a(e([[4,2],[5,2],[6,2],[7,2]])),a(e([[8,3],[8,4],[8,5],[8,6],[8,7]]))},isShip:e=>{const[t,n]=e;return"none"!==r[t][n]},getShip:e=>{const[t,n]=e;return r[t][n]},ships:s,type:t}}(t),o=e=>{r.push(e)};return{attempt:o,board:n,type:t,generateMove:()=>{const e=e=>Math.floor(Math.random()*e),t=e=>r.some((t=>{const[r,n]=t;return r===e[0]&&n===e[1]}));let n=[e(9),e(9)];for(;t(n);)n=[e(9),e(9)];return o(n),n}}},r=(()=>{const t=(e,t)=>{const[r,n]=e,o=document.getElementById(`${t.type} - ${r},${n}`),s=t.isShip(e);o.innerHTML=s?"Hit":"Miss"},r=e=>{const[t,r]=e,n=document.querySelectorAll(".selectCell");for(const e of n)if(parseInt(e.dataset.x)===t&&parseInt(e.dataset.y)===r)return e};return{renderBoard:e=>{const r=document.getElementById("board");r.innerHTML='<div id="overlay"></div>';const n=document.createElement("h3");console.log(e),n.innerHTML=`${e.type}'s Turn`,r.appendChild(n),e.boardArray.forEach(((t,n)=>{const o=document.createElement("div");o.classList.add("rowDiv"),t.forEach(((t,r)=>{const a=document.createElement("div");a.classList.add("boardCell"),a.id=`${e.type} - ${n},${r}`,a.dataset.board=e.type,a.dataset.x=n,a.dataset.y=r,e===s.computerPlayer.board&&"none"!==t&&a.classList.add("selected"),"none"!==t&&(a.classList.add("shipCell"),t.isSunk()&&(a.style.backgroundColor="red")),a.addEventListener("click",(e=>{e.stopPropagation(),""===a.textContent&&s.moveEvent(a)})),o.appendChild(a)})),r.appendChild(o)})),e.misses.forEach((r=>{t(r,e)})),e.hits.forEach((r=>{t(r,e)}))},attempt:t,stopClicks:()=>{document.getElementById("overlay").style.pointerEvents="all"},startClicks:()=>{document.getElementById("overlay").style.pointerEvents="none"},styleSunk:e=>{document.querySelectorAll(".rowDiv").forEach((t=>{document.querySelectorAll(".boardCell").forEach((t=>{const[r,n]=[t.dataset.x,t.dataset.y];"User"===e?s.userPlayer.board.isShip([r,n])&&s.userPlayer.board.getShip([r,n]).isSunk()&&(t.style.backgroundColor="red"):s.computerPlayer.board.isShip([r,n])&&s.computerPlayer.board.getShip([r,n]).isSunk()&&(t.style.backgroundColor="red")}))}))},renderStart:()=>{const t=document.getElementById("startScreen");t.style.display="flex";const n=document.createElement("button");n.id="startBtn",n.textContent="Start Game",t.appendChild(n),document.getElementById("board").style.display="none",document.getElementById("switchTurnBtn").style.display="none",(()=>{const t=document.getElementById("startScreen");t.style.display="flex";const n=document.createElement("h3");n.textContent="Choose 5 Coordinates";for(let o=0;o<10;o++){const a=document.createElement("div");a.classList.add("rowDiv");for(let t=0;t<10;t++){const n=document.createElement("div");n.classList.add("selectCell"),a.appendChild(n),n.dataset.x=o,n.dataset.y=t,n.onmouseenter=e=>{n.style.backgroundColor="yellow";for(let e=1;e<5;e++){let n=r([o,t+e]);n=r([o+e,t]),void 0!==n&&(n.style.backgroundColor="yellow")}},n.onmouseout=e=>{n.style.backgroundColor="";for(let e=1;e<5;e++){let n=r([o,t+e]);n=r([o+e,t]),void 0!==n&&(n.style.backgroundColor="")}},n.onclick=a=>{let l=[[parseInt(n.dataset.x),parseInt(n.dataset.y)]];n.classList.add("selected");for(let e=1;e<5;e++){let n=r([o,t+e]);n=r([o+e,t]),n.classList.add("selected"),console.log(n.style.backgroundColor),l.push([parseInt(n.dataset.x),parseInt(n.dataset.y)])}s.computerPlayer.board.placeShip(e(l)),console.log("placed")}}t.appendChild(a),t.appendChild(n)}})(),n.onclick=()=>{t.style.display="",document.getElementById("board").style.display="",document.getElementById("switchTurnBtn").style.display="",n.style.display="none"}},toggleTurnBtn:()=>{const e=document.getElementById("switchTurnBtn");e.disabled=!e.disabled}}})(),n=r,o=(()=>{const e=t("Computer"),r=t("User");let s=r;const a=e=>{e.board.ships.length>0&&e.board.ships.every((e=>e.isSunk()))&&alert(`${s.type} wins`)};return{initGame:()=>{r.board,e.board},switchTurn:()=>{console.log("start switch",o.currentPlayer.type),o.currentPlayer===r?o.currentPlayer=e:o.currentPlayer=r,console.log("end switch",o.currentPlayer.type)},computerPlayer:e,userPlayer:r,currentPlayer:s,checkLoss:a,moveEvent:t=>{n.stopClicks();const l="Computer"===t.dataset.board?e.board:r.board;l.receiveAttack([t.dataset.x,t.dataset.y]),n.attempt([t.dataset.x,t.dataset.y],l),n.styleSunk(l.type),a(s),o.switchTurn(),n.toggleTurnBtn()},computerMoveEvent:async()=>{n.stopClicks(),await(750,new Promise((e=>{setTimeout(e,750)}))),console.log("after 1 sec");const e=o.computerPlayer.generateMove(),t=o.computerPlayer.board;t.receiveAttack(e),n.attempt(e,t),n.styleSunk(t.type),o.checkLoss(o.currentPlayer),o.switchTurn(),n.toggleTurnBtn()}}})(),s=o;s.initGame();const a=document.getElementById("switchTurnBtn");n.renderBoard(s.currentPlayer.board),n.renderStart(),a.onclick=()=>{n.toggleTurnBtn(),n.renderBoard(s.currentPlayer.board),s.currentPlayer===s.computerPlayer?s.computerMoveEvent():n.startClicks()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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eEIsRUFBR25DLG1CQVFTLElBTEgsSUFBSW9DLFNBQVNDLElBQ2xCQyxXQUFXRCxFQUlILElBSnlCLEtBTXJDdkQsUUFBUUMsSUFBSSxlQUNaLE1BQU01QyxFQUFjcUYsRUFBSy9CLGVBQWVwQyxlQUVsQzRFLEVBQVlULEVBQUsvQixlQUFlaEUsTUFDdEN3RyxFQUFVeEYsY0FBY04sR0FDeEIsRUFBR2lCLFFBQVFqQixFQUFhOEYsR0FDeEIsRUFBRzlCLFVBQVU4QixFQUFVMUcsTUFDdkJpRyxFQUFLRSxVQUFVRixFQUFLQyxlQUNwQkQsRUFBS1EsYUFDTCxFQUFHWCxlQUFlLEVBYXJCLEVBbEZZLEdBb0ZiLElDcEZBLEVBQUtVLFdBQ0wsTUFBTVQsRUFBZ0JyRCxTQUFTQyxlQUFlLGlCQUM5QyxFQUFHUSxZQUFZLEVBQUsrQyxjQUFjaEcsT0FDbEMsRUFBRzZFLGNBRUhnQixFQUFjSixRQUFVLEtBQ3RCLEVBQUdHLGdCQUVILEVBQUczQyxZQUFZLEVBQUsrQyxjQUFjaEcsT0FFOUIsRUFBS2dHLGdCQUFrQixFQUFLaEMsZUFDOUIsRUFBS3lDLG9CQUVMLEVBQUdoQyxhQUNMLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvU2hpcC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvUGxheWVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvbW9kdWxlcy9HYW1lYm9hcmQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL1VJLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvbW9kdWxlcy9nYW1lLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU2hpcCA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gIGxldCBoaXRzID0gMDtcblxuICBjb25zdCBnZXRIaXRzID0gKCkgPT4ge1xuICAgIHJldHVybiBoaXRzO1xuICB9O1xuXG4gIGNvbnN0IGhpdCA9ICgpID0+IHtcbiAgICBoaXRzKys7XG4gIH07XG5cbiAgY29uc3QgZ2V0TGVuZ3RoID0gKCkgPT4ge1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgcGF0aC5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICBjb3VudCsrO1xuICAgIH0pO1xuICAgIHJldHVybiBjb3VudDtcbiAgfTtcblxuICBjb25zdCBpc1N1bmsgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGhpdHMgPj0gZ2V0TGVuZ3RoKCk7XG4gIH07XG5cbiAgY29uc3QgZ2V0UGF0aCA9ICgpID0+IHtcbiAgICByZXR1cm4gcGF0aDtcbiAgfTtcblxuICBjb25zdCByZXNldEhpdHMgPSAoKSA9PiB7XG4gICAgaGl0cyA9IDA7XG4gIH07XG5cbiAgcmV0dXJuIHsgZ2V0TGVuZ3RoLCBpc1N1bmssIGhpdCwgZ2V0SGl0cywgZ2V0UGF0aCwgcmVzZXRIaXRzLCBoaXRzIH07XG59O1xuZXhwb3J0IGRlZmF1bHQgU2hpcDtcbiIsImltcG9ydCBHYW1lYm9hcmQgZnJvbSBcIi4vR2FtZWJvYXJkXCI7XG5cbmNvbnN0IFBsYXllciA9ICh0eXBlKSA9PiB7XG4gIGNvbnN0IGF0dGVtcHRzID0gW107XG4gIGNvbnN0IHR1cm4gPSBmYWxzZTtcbiAgY29uc3QgYm9hcmQgPSBHYW1lYm9hcmQodHlwZSk7XG5cbiAgY29uc3QgYXR0ZW1wdCA9IChjb29yZGluYXRlcykgPT4ge1xuICAgIGF0dGVtcHRzLnB1c2goY29vcmRpbmF0ZXMpO1xuICB9O1xuXG4gIGNvbnN0IGdlbmVyYXRlTW92ZSA9ICgpID0+IHtcbiAgICBjb25zdCBnZXRSYW5kb21JbnQgPSAobWF4KSA9PiB7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbWF4KTtcbiAgICB9O1xuXG4gICAgY29uc3QgY2hlY2tBdHRlbXB0ZWQgPSAoYXR0ZW1wdCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXR0ZW1wdHMuc29tZSgoY29vcmRpbmF0ZSkgPT4ge1xuICAgICAgICBjb25zdCBbeCwgeV0gPSBjb29yZGluYXRlO1xuXG4gICAgICAgIHJldHVybiB4ID09PSBhdHRlbXB0WzBdICYmIHkgPT09IGF0dGVtcHRbMV07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgbGV0IG1vdmUgPSBbZ2V0UmFuZG9tSW50KDkpLCBnZXRSYW5kb21JbnQoOSldO1xuXG4gICAgd2hpbGUgKGNoZWNrQXR0ZW1wdGVkKG1vdmUpKSB7XG4gICAgICBtb3ZlID0gW2dldFJhbmRvbUludCg5KSwgZ2V0UmFuZG9tSW50KDkpXTtcbiAgICB9XG5cbiAgICBhdHRlbXB0KG1vdmUpO1xuXG4gICAgcmV0dXJuIG1vdmU7XG4gIH07XG5cbiAgcmV0dXJuIHsgYXR0ZW1wdCwgYm9hcmQsIHR5cGUsIGdlbmVyYXRlTW92ZSB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUGxheWVyO1xuIiwiaW1wb3J0IFNoaXAgZnJvbSBcIi4vU2hpcC5qc1wiO1xuXG5jb25zdCBHYW1lYm9hcmQgPSBmdW5jdGlvbiAodHlwZSkge1xuICBjb25zdCBib2FyZEFycmF5ID0gWy4uLkFycmF5KDEwKV0ubWFwKChlKSA9PiBBcnJheSgxMCkuZmlsbChcIm5vbmVcIikpO1xuICBjb25zdCBoaXRzID0gW107XG4gIGNvbnN0IG1pc3NlcyA9IFtdO1xuICBsZXQgc2hpcHMgPSBbXTtcblxuICBjb25zdCBpbml0Qm9hcmQgPSAoKSA9PiB7XG4gICAgcGxhY2VTaGlwKFxuICAgICAgU2hpcChbXG4gICAgICAgIFsxLCA0XSxcbiAgICAgICAgWzEsIDVdLFxuICAgICAgXSlcbiAgICApO1xuICAgIHBsYWNlU2hpcChcbiAgICAgIFNoaXAoW1xuICAgICAgICBbNiwgNF0sXG4gICAgICAgIFs2LCA1XSxcbiAgICAgICAgWzYsIDZdLFxuICAgICAgXSlcbiAgICApO1xuICAgIHBsYWNlU2hpcChcbiAgICAgIFNoaXAoW1xuICAgICAgICBbNCwgMl0sXG4gICAgICAgIFs1LCAyXSxcbiAgICAgICAgWzYsIDJdLFxuICAgICAgICBbNywgMl0sXG4gICAgICBdKVxuICAgICk7XG5cbiAgICBwbGFjZVNoaXAoXG4gICAgICBTaGlwKFtcbiAgICAgICAgWzgsIDNdLFxuICAgICAgICBbOCwgNF0sXG4gICAgICAgIFs4LCA1XSxcbiAgICAgICAgWzgsIDZdLFxuICAgICAgICBbOCwgN10sXG4gICAgICBdKVxuICAgICk7XG4gIH07XG5cbiAgY29uc3QgcmVzZXRHYW1lYm9hcmQgPSAoKSA9PiB7XG4gICAgaGl0cyA9IFtdO1xuICAgIG1pc3NlcyA9IFtdO1xuICAgIHNoaXBzID0gW107XG4gIH07XG5cbiAgY29uc3QgcGxhY2VTaGlwID0gKHNoaXBPYmplY3QpID0+IHtcbiAgICBjb25zdCBwYXRoID0gc2hpcE9iamVjdC5nZXRQYXRoKCk7XG4gICAgcGF0aC5mb3JFYWNoKChjb29yZGluYXRlcykgPT4ge1xuICAgICAgY29uc3QgW3gsIHldID0gY29vcmRpbmF0ZXM7XG4gICAgICBib2FyZEFycmF5W3hdW3ldID0gc2hpcE9iamVjdDtcbiAgICB9KTtcbiAgICBhZGRTaGlwKHNoaXBPYmplY3QpO1xuICB9O1xuXG4gIGNvbnN0IHJlY2VpdmVBdHRhY2sgPSAoY29vcmRpbmF0ZXMpID0+IHtcbiAgICBjb25zdCBbeCwgeV0gPSBjb29yZGluYXRlcztcblxuICAgIGxldCBhbHJlYWR5SGl0LFxuICAgICAgYWxyZWFkeU1pc3MgPSBmYWxzZTtcblxuICAgIGFscmVhZHlIaXQgPSBoaXRzLnNvbWUoKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IFt4SXRlbSwgeUl0ZW1dID0gaXRlbTtcbiAgICAgIHJldHVybiB4SXRlbSA9PT0gY29vcmRpbmF0ZXNbMF0gJiYgeUl0ZW0gPT09IGNvb3JkaW5hdGVzWzFdO1xuICAgIH0pO1xuICAgIGFscmVhZHlNaXNzID0gbWlzc2VzLnNvbWUoKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IFt4SXRlbSwgeUl0ZW1dID0gaXRlbTtcbiAgICAgIHJldHVybiB4SXRlbSA9PT0gY29vcmRpbmF0ZXNbMF0gJiYgeUl0ZW0gPT09IGNvb3JkaW5hdGVzWzFdO1xuICAgIH0pO1xuXG4gICAgaWYgKGJvYXJkQXJyYXlbeF1beV0gIT09IFwibm9uZVwiICYmIGFscmVhZHlIaXQgPT09IGZhbHNlKSB7XG4gICAgICBib2FyZEFycmF5W3hdW3ldLmhpdCgpO1xuICAgICAgaGl0cy5wdXNoKGNvb3JkaW5hdGVzKTtcbiAgICB9IGVsc2UgaWYgKGJvYXJkQXJyYXlbeF1beV0gPT09IFwibm9uZVwiICYmIGFscmVhZHlNaXNzID09PSBmYWxzZSkge1xuICAgICAgbWlzc2VzLnB1c2goY29vcmRpbmF0ZXMpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBhZGRTaGlwID0gKHNoaXApID0+IHtcbiAgICBzaGlwcy5wdXNoKHNoaXApO1xuICB9O1xuXG4gIGNvbnN0IGlzU2hpcCA9IChjb29yZGluYXRlcykgPT4ge1xuICAgIGNvbnN0IFt4LCB5XSA9IGNvb3JkaW5hdGVzO1xuXG4gICAgcmV0dXJuIGJvYXJkQXJyYXlbeF1beV0gIT09IFwibm9uZVwiO1xuICB9O1xuXG4gIGNvbnN0IGdldFNoaXAgPSAoY29vcmRpbmF0ZXMpID0+IHtcbiAgICBjb25zdCBbeCwgeV0gPSBjb29yZGluYXRlcztcblxuICAgIHJldHVybiBib2FyZEFycmF5W3hdW3ldO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgcGxhY2VTaGlwLFxuICAgIGJvYXJkQXJyYXksXG4gICAgcmVjZWl2ZUF0dGFjayxcbiAgICBoaXRzLFxuICAgIG1pc3NlcyxcbiAgICBhZGRTaGlwLFxuICAgIHJlc2V0R2FtZWJvYXJkLFxuICAgIGluaXRCb2FyZCxcbiAgICBpc1NoaXAsXG4gICAgZ2V0U2hpcCxcbiAgICBzaGlwcyxcbiAgICB0eXBlLFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgR2FtZWJvYXJkO1xuIiwiaW1wb3J0IEdhbWVib2FyZCBmcm9tIFwiLi9HYW1lYm9hcmRcIjtcbmltcG9ydCBQbGF5ZXIgZnJvbSBcIi4vUGxheWVyXCI7XG5pbXBvcnQgU2hpcCBmcm9tIFwiLi9TaGlwXCI7XG5pbXBvcnQgZ2FtZSBmcm9tIFwiLi9nYW1lXCI7XG5cbmNvbnN0IFVJID0gKCgpID0+IHtcbiAgY29uc3QgcmVuZGVyU3RhcnQgPSAoKSA9PiB7XG4gICAgY29uc3Qgc3RhcnRTY3JlZW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0YXJ0U2NyZWVuXCIpO1xuICAgIHN0YXJ0U2NyZWVuLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcblxuICAgIGNvbnN0IHN0YXJ0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBzdGFydEJ1dHRvbi5pZCA9IFwic3RhcnRCdG5cIjtcbiAgICBzdGFydEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiU3RhcnQgR2FtZVwiO1xuXG4gICAgc3RhcnRTY3JlZW4uYXBwZW5kQ2hpbGQoc3RhcnRCdXR0b24pO1xuXG4gICAgY29uc3QgYm9hcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJvYXJkXCIpO1xuICAgIGJvYXJkLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblxuICAgIGNvbnN0IG5leHRUdXJuQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzd2l0Y2hUdXJuQnRuXCIpO1xuICAgIG5leHRUdXJuQnRuLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblxuICAgIGdlbmVyYXRlR3JpZCgpO1xuXG4gICAgc3RhcnRCdXR0b24ub25jbGljayA9ICgpID0+IHtcbiAgICAgIHN0YXJ0RXZlbnQoc3RhcnRTY3JlZW4pO1xuICAgICAgc3RhcnRCdXR0b24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIH07XG4gIH07XG5cbiAgY29uc3Qgc3RhcnRFdmVudCA9IChlbGVtZW50KSA9PiB7XG4gICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblxuICAgIGNvbnN0IGJvYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJib2FyZFwiKTtcbiAgICBib2FyZC5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblxuICAgIGNvbnN0IG5leHRUdXJuQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzd2l0Y2hUdXJuQnRuXCIpO1xuICAgIG5leHRUdXJuQnRuLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuICB9O1xuXG4gIGNvbnN0IHJlbmRlckJvYXJkID0gKHBsYXllckJvYXJkKSA9PiB7XG4gICAgY29uc3QgYm9hcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJvYXJkXCIpO1xuICAgIGJvYXJkLmlubmVySFRNTCA9IGA8ZGl2IGlkPVwib3ZlcmxheVwiPjwvZGl2PmA7XG5cbiAgICBjb25zdCBwbGF5ZXJUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoM1wiKTtcbiAgICBjb25zb2xlLmxvZyhwbGF5ZXJCb2FyZCk7XG4gICAgcGxheWVyVGl0bGUuaW5uZXJIVE1MID0gYCR7cGxheWVyQm9hcmQudHlwZX0ncyBUdXJuYDtcblxuICAgIGJvYXJkLmFwcGVuZENoaWxkKHBsYXllclRpdGxlKTtcblxuICAgIHBsYXllckJvYXJkLmJvYXJkQXJyYXkuZm9yRWFjaCgocm93LCByb3dJbmRleCkgPT4ge1xuICAgICAgY29uc3Qgcm93RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIHJvd0Rpdi5jbGFzc0xpc3QuYWRkKFwicm93RGl2XCIpO1xuXG4gICAgICByb3cuZm9yRWFjaCgoaXRlbSwgY2VsbEluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoXCJib2FyZENlbGxcIik7XG4gICAgICAgIGNlbGwuaWQgPSBgJHtwbGF5ZXJCb2FyZC50eXBlfSAtICR7cm93SW5kZXh9LCR7Y2VsbEluZGV4fWA7XG4gICAgICAgIGNlbGwuZGF0YXNldC5ib2FyZCA9IHBsYXllckJvYXJkLnR5cGU7XG4gICAgICAgIGNlbGwuZGF0YXNldC54ID0gcm93SW5kZXg7XG4gICAgICAgIGNlbGwuZGF0YXNldC55ID0gY2VsbEluZGV4O1xuXG4gICAgICAgIGlmIChwbGF5ZXJCb2FyZCA9PT0gZ2FtZS5jb21wdXRlclBsYXllci5ib2FyZCAmJiBpdGVtICE9PSBcIm5vbmVcIikge1xuICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcInNlbGVjdGVkXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGl0ZW0gIT09IFwibm9uZVwiKSB7XG4gICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKFwic2hpcENlbGxcIik7XG5cbiAgICAgICAgICBpZiAoaXRlbS5pc1N1bmsoKSkge1xuICAgICAgICAgICAgY2VsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgICAgICAgLy8gYWRqdXN0IHRoaXMuIE1heWJlIG1ha2UgaXQgYSBwbGF5Um91bmQgdGhpbmcgdG8ga2ljayBvZmYgYSByb3VuZCBhbmQgZW5kIGl0IHdpdGggYSB0dXJuIHN3aXRjaC5cbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIGlmIChjZWxsLnRleHRDb250ZW50ID09PSBcIlwiKSBnYW1lLm1vdmVFdmVudChjZWxsKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcm93RGl2LmFwcGVuZENoaWxkKGNlbGwpO1xuICAgICAgfSk7XG5cbiAgICAgIGJvYXJkLmFwcGVuZENoaWxkKHJvd0Rpdik7XG4gICAgfSk7XG5cbiAgICBwbGF5ZXJCb2FyZC5taXNzZXMuZm9yRWFjaCgoY29vcmRpbmF0ZXMpID0+IHtcbiAgICAgIGF0dGVtcHQoY29vcmRpbmF0ZXMsIHBsYXllckJvYXJkKTtcbiAgICB9KTtcbiAgICBwbGF5ZXJCb2FyZC5oaXRzLmZvckVhY2goKGNvb3JkaW5hdGVzKSA9PiB7XG4gICAgICBhdHRlbXB0KGNvb3JkaW5hdGVzLCBwbGF5ZXJCb2FyZCk7XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgYXR0ZW1wdCA9IChjb29yZGluYXRlcywgZ2FtZWJvYXJkKSA9PiB7XG4gICAgY29uc3QgW3gsIHldID0gY29vcmRpbmF0ZXM7XG4gICAgY29uc3QgdGFyZ2V0Q2VsbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke2dhbWVib2FyZC50eXBlfSAtICR7eH0sJHt5fWApO1xuICAgIGNvbnN0IGlzU2hpcCA9IGdhbWVib2FyZC5pc1NoaXAoY29vcmRpbmF0ZXMpO1xuXG4gICAgaWYgKGlzU2hpcCkge1xuICAgICAgdGFyZ2V0Q2VsbC5pbm5lckhUTUwgPSBcIkhpdFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXRDZWxsLmlubmVySFRNTCA9IFwiTWlzc1wiO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBzdG9wQ2xpY2tzID0gKCkgPT4ge1xuICAgIGNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm92ZXJsYXlcIik7XG5cbiAgICBvdmVybGF5LnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcImFsbFwiO1xuICB9O1xuXG4gIGNvbnN0IHN0YXJ0Q2xpY2tzID0gKCkgPT4ge1xuICAgIGNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm92ZXJsYXlcIik7XG5cbiAgICBvdmVybGF5LnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcIm5vbmVcIjtcbiAgfTtcblxuICBjb25zdCBzdHlsZVN1bmsgPSAoYm9hcmRUeXBlKSA9PiB7XG4gICAgY29uc3Qgcm93cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucm93RGl2XCIpO1xuICAgIHJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG4gICAgICBjb25zdCBjZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYm9hcmRDZWxsXCIpO1xuICAgICAgY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICBjb25zdCBbeCwgeV0gPSBbY2VsbC5kYXRhc2V0LngsIGNlbGwuZGF0YXNldC55XTtcblxuICAgICAgICBpZiAoYm9hcmRUeXBlID09PSBcIlVzZXJcIikge1xuICAgICAgICAgIGlmIChnYW1lLnVzZXJQbGF5ZXIuYm9hcmQuaXNTaGlwKFt4LCB5XSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHNoaXAgPSBnYW1lLnVzZXJQbGF5ZXIuYm9hcmQuZ2V0U2hpcChbeCwgeV0pO1xuICAgICAgICAgICAgaWYgKHNoaXAuaXNTdW5rKCkpIGNlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGdhbWUuY29tcHV0ZXJQbGF5ZXIuYm9hcmQuaXNTaGlwKFt4LCB5XSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHNoaXAgPSBnYW1lLmNvbXB1dGVyUGxheWVyLmJvYXJkLmdldFNoaXAoW3gsIHldKTtcbiAgICAgICAgICAgIGlmIChzaGlwLmlzU3VuaygpKSBjZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCB0b2dnbGVUdXJuQnRuID0gKCkgPT4ge1xuICAgIGNvbnN0IHN3aXRjaFR1cm5CdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN3aXRjaFR1cm5CdG5cIik7XG4gICAgc3dpdGNoVHVybkJ0bi5kaXNhYmxlZCA9ICFzd2l0Y2hUdXJuQnRuLmRpc2FibGVkO1xuICB9O1xuXG4gIC8vIENob29zZSBTaGlwIExvY2F0aW9uc1xuXG4gIGNvbnN0IGlzVmVydGljYWwgPSB0cnVlO1xuICBjb25zdCBzaGlwTGVuZ3RocyA9IFsyLCAzLCA0LCA1XTtcbiAgY29uc3QgY3VycmVudFNoaXBMZW5ndGggPSA1O1xuXG4gIGNvbnN0IGdlbmVyYXRlR3JpZCA9ICgpID0+IHtcbiAgICBjb25zdCBzdGFydFNjcmVlbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhcnRTY3JlZW5cIik7XG4gICAgc3RhcnRTY3JlZW4uc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xuXG4gICAgY29uc3QgY2hvb3NlU2hpcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoM1wiKTtcbiAgICBjaG9vc2VTaGlwLnRleHRDb250ZW50ID0gYENob29zZSAke2N1cnJlbnRTaGlwTGVuZ3RofSBDb29yZGluYXRlc2A7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgIGNvbnN0IHJvd0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICByb3dEaXYuY2xhc3NMaXN0LmFkZChcInJvd0RpdlwiKTtcblxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAxMDsgaisrKSB7XG4gICAgICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RDZWxsXCIpO1xuICAgICAgICByb3dEaXYuYXBwZW5kQ2hpbGQoY2VsbCk7XG5cbiAgICAgICAgY2VsbC5kYXRhc2V0LnggPSBpO1xuICAgICAgICBjZWxsLmRhdGFzZXQueSA9IGo7XG5cbiAgICAgICAgY2VsbC5vbm1vdXNlZW50ZXIgPSAoZSkgPT4ge1xuICAgICAgICAgIGNlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ5ZWxsb3dcIjtcbiAgICAgICAgICBmb3IgKGxldCBrID0gMTsgayA8IGN1cnJlbnRTaGlwTGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgIGxldCBuZXdDZWxsID0gZ2V0U2VsZWN0Q2VsbChbaSwgaiArIGtdKTtcblxuICAgICAgICAgICAgaWYgKGlzVmVydGljYWwpIHtcbiAgICAgICAgICAgICAgbmV3Q2VsbCA9IGdldFNlbGVjdENlbGwoW2kgKyBrLCBqXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChuZXdDZWxsICE9PSB1bmRlZmluZWQpIG5ld0NlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ5ZWxsb3dcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgY2VsbC5vbm1vdXNlb3V0ID0gKGUpID0+IHtcbiAgICAgICAgICBjZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiXCI7XG4gICAgICAgICAgZm9yIChsZXQgayA9IDE7IGsgPCBjdXJyZW50U2hpcExlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICBsZXQgbmV3Q2VsbCA9IGdldFNlbGVjdENlbGwoW2ksIGogKyBrXSk7XG5cbiAgICAgICAgICAgIGlmIChpc1ZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgIG5ld0NlbGwgPSBnZXRTZWxlY3RDZWxsKFtpICsgaywgal0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobmV3Q2VsbCAhPT0gdW5kZWZpbmVkKSBuZXdDZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGNlbGwub25jbGljayA9IChlKSA9PiB7XG4gICAgICAgICAgbGV0IHNoaXBDb29yZGluYXRlcyA9IFtcbiAgICAgICAgICAgIFtwYXJzZUludChjZWxsLmRhdGFzZXQueCksIHBhcnNlSW50KGNlbGwuZGF0YXNldC55KV0sXG4gICAgICAgICAgXTtcblxuICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcInNlbGVjdGVkXCIpO1xuXG4gICAgICAgICAgZm9yIChsZXQgayA9IDE7IGsgPCBjdXJyZW50U2hpcExlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICBsZXQgbmV3Q2VsbCA9IGdldFNlbGVjdENlbGwoW2ksIGogKyBrXSk7XG5cbiAgICAgICAgICAgIGlmIChpc1ZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgIG5ld0NlbGwgPSBnZXRTZWxlY3RDZWxsKFtpICsgaywgal0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuZXdDZWxsLmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RlZFwiKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG5ld0NlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yKTtcbiAgICAgICAgICAgIHNoaXBDb29yZGluYXRlcy5wdXNoKFtcbiAgICAgICAgICAgICAgcGFyc2VJbnQobmV3Q2VsbC5kYXRhc2V0LngpLFxuICAgICAgICAgICAgICBwYXJzZUludChuZXdDZWxsLmRhdGFzZXQueSksXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBnYW1lLmNvbXB1dGVyUGxheWVyLmJvYXJkLnBsYWNlU2hpcChTaGlwKHNoaXBDb29yZGluYXRlcykpO1xuXG4gICAgICAgICAgY29uc29sZS5sb2coXCJwbGFjZWRcIik7XG4gICAgICAgICAgLy8gbmV4dFNoaXAoKTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgc3RhcnRTY3JlZW4uYXBwZW5kQ2hpbGQocm93RGl2KTtcbiAgICAgIHN0YXJ0U2NyZWVuLmFwcGVuZENoaWxkKGNob29zZVNoaXApO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBnZXRTZWxlY3RDZWxsID0gKGNvb3JkaW5hdGVzKSA9PiB7XG4gICAgY29uc3QgW3gsIHldID0gY29vcmRpbmF0ZXM7XG5cbiAgICBjb25zdCBzZWxlY3RDZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc2VsZWN0Q2VsbFwiKTtcbiAgICBmb3IgKGNvbnN0IHNlbGVjdENlbGwgb2Ygc2VsZWN0Q2VsbHMpIHtcbiAgICAgIGlmIChcbiAgICAgICAgcGFyc2VJbnQoc2VsZWN0Q2VsbC5kYXRhc2V0LngpID09PSB4ICYmXG4gICAgICAgIHBhcnNlSW50KHNlbGVjdENlbGwuZGF0YXNldC55KSA9PT0geVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RDZWxsO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHJlbmRlckJvYXJkLFxuICAgIGF0dGVtcHQsXG4gICAgc3RvcENsaWNrcyxcbiAgICBzdGFydENsaWNrcyxcbiAgICBzdHlsZVN1bmssXG4gICAgcmVuZGVyU3RhcnQsXG4gICAgdG9nZ2xlVHVybkJ0bixcbiAgfTtcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IFVJO1xuIiwiaW1wb3J0IEdhbWVib2FyZCBmcm9tIFwiLi9HYW1lYm9hcmRcIjtcbmltcG9ydCBTaGlwIGZyb20gXCIuL1NoaXBcIjtcbmltcG9ydCBQbGF5ZXIgZnJvbSBcIi4vUGxheWVyXCI7XG5pbXBvcnQgVUkgZnJvbSBcIi4vVUlcIjtcblxuY29uc3QgZ2FtZSA9ICgoKSA9PiB7XG4gIGNvbnN0IGNvbXB1dGVyUGxheWVyID0gUGxheWVyKFwiQ29tcHV0ZXJcIik7XG4gIGNvbnN0IHVzZXJQbGF5ZXIgPSBQbGF5ZXIoXCJVc2VyXCIpO1xuXG4gIGxldCBjdXJyZW50UGxheWVyID0gdXNlclBsYXllcjtcblxuICBjb25zdCBpbml0R2FtZSA9ICgpID0+IHtcbiAgICBjb25zdCB1c2VyQm9hcmQgPSB1c2VyUGxheWVyLmJvYXJkO1xuICAgIGNvbnN0IGNvbXB1dGVyQm9hcmQgPSBjb21wdXRlclBsYXllci5ib2FyZDtcbiAgICAvLyBjb21wdXRlckJvYXJkLmluaXRCb2FyZCgpO1xuICAgIC8vIHVzZXJCb2FyZC5pbml0Qm9hcmQoKTtcbiAgfTtcblxuICBjb25zdCBzd2l0Y2hUdXJuID0gKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwic3RhcnQgc3dpdGNoXCIsIGdhbWUuY3VycmVudFBsYXllci50eXBlKTtcbiAgICBpZiAoZ2FtZS5jdXJyZW50UGxheWVyID09PSB1c2VyUGxheWVyKSB7XG4gICAgICBnYW1lLmN1cnJlbnRQbGF5ZXIgPSBjb21wdXRlclBsYXllcjtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2FtZS5jdXJyZW50UGxheWVyID0gdXNlclBsYXllcjtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhcImVuZCBzd2l0Y2hcIiwgZ2FtZS5jdXJyZW50UGxheWVyLnR5cGUpO1xuICB9O1xuXG4gIGNvbnN0IGNoZWNrTG9zcyA9IChwbGF5ZXIpID0+IHtcbiAgICBjb25zdCBhbGxTdW5rID1cbiAgICAgIHBsYXllci5ib2FyZC5zaGlwcy5sZW5ndGggPiAwICYmXG4gICAgICBwbGF5ZXIuYm9hcmQuc2hpcHMuZXZlcnkoKHNoaXApID0+IHtcbiAgICAgICAgcmV0dXJuIHNoaXAuaXNTdW5rKCk7XG4gICAgICB9KTtcblxuICAgIGlmIChhbGxTdW5rKSBhbGVydChgJHtjdXJyZW50UGxheWVyLnR5cGV9IHdpbnNgKTtcbiAgfTtcblxuICBjb25zdCBtb3ZlRXZlbnQgPSAoY2VsbCkgPT4ge1xuICAgIFVJLnN0b3BDbGlja3MoKTtcbiAgICBjb25zdCBjZWxsQm9hcmQgPVxuICAgICAgY2VsbC5kYXRhc2V0LmJvYXJkID09PSBcIkNvbXB1dGVyXCJcbiAgICAgICAgPyBjb21wdXRlclBsYXllci5ib2FyZFxuICAgICAgICA6IHVzZXJQbGF5ZXIuYm9hcmQ7XG5cbiAgICBjZWxsQm9hcmQucmVjZWl2ZUF0dGFjayhbY2VsbC5kYXRhc2V0LngsIGNlbGwuZGF0YXNldC55XSk7XG4gICAgVUkuYXR0ZW1wdChbY2VsbC5kYXRhc2V0LngsIGNlbGwuZGF0YXNldC55XSwgY2VsbEJvYXJkKTtcbiAgICBVSS5zdHlsZVN1bmsoY2VsbEJvYXJkLnR5cGUpO1xuICAgIGNoZWNrTG9zcyhjdXJyZW50UGxheWVyKTtcbiAgICBnYW1lLnN3aXRjaFR1cm4oKTtcbiAgICBVSS50b2dnbGVUdXJuQnRuKCk7XG4gIH07XG5cbiAgY29uc3QgY29tcHV0ZXJNb3ZlRXZlbnQgPSBhc3luYyAoKSA9PiB7XG4gICAgVUkuc3RvcENsaWNrcygpO1xuXG4gICAgY29uc3QgZGVsYXkgPSAobWlsbGlzZWNvbmRzKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgc2V0VGltZW91dChyZXNvbHZlLCBtaWxsaXNlY29uZHMpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGF3YWl0IGRlbGF5KDc1MCk7XG5cbiAgICBjb25zb2xlLmxvZyhcImFmdGVyIDEgc2VjXCIpO1xuICAgIGNvbnN0IGNvb3JkaW5hdGVzID0gZ2FtZS5jb21wdXRlclBsYXllci5nZW5lcmF0ZU1vdmUoKTtcblxuICAgIGNvbnN0IGNlbGxCb2FyZCA9IGdhbWUuY29tcHV0ZXJQbGF5ZXIuYm9hcmQ7XG4gICAgY2VsbEJvYXJkLnJlY2VpdmVBdHRhY2soY29vcmRpbmF0ZXMpO1xuICAgIFVJLmF0dGVtcHQoY29vcmRpbmF0ZXMsIGNlbGxCb2FyZCk7XG4gICAgVUkuc3R5bGVTdW5rKGNlbGxCb2FyZC50eXBlKTtcbiAgICBnYW1lLmNoZWNrTG9zcyhnYW1lLmN1cnJlbnRQbGF5ZXIpO1xuICAgIGdhbWUuc3dpdGNoVHVybigpO1xuICAgIFVJLnRvZ2dsZVR1cm5CdG4oKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGluaXRHYW1lLFxuICAgIHN3aXRjaFR1cm4sXG4gICAgY29tcHV0ZXJQbGF5ZXIsXG4gICAgdXNlclBsYXllcixcbiAgICBjdXJyZW50UGxheWVyLFxuICAgIGNoZWNrTG9zcyxcbiAgICBtb3ZlRXZlbnQsXG4gICAgY29tcHV0ZXJNb3ZlRXZlbnQsXG4gIH07XG59KSgpO1xuXG5leHBvcnQgZGVmYXVsdCBnYW1lO1xuIiwiaW1wb3J0IEdhbWVib2FyZCBmcm9tIFwiLi9tb2R1bGVzL0dhbWVib2FyZC5qc1wiO1xuaW1wb3J0IFNoaXAgZnJvbSBcIi4vbW9kdWxlcy9TaGlwLmpzXCI7XG5pbXBvcnQgZ2FtZSBmcm9tIFwiLi9tb2R1bGVzL2dhbWUuanNcIjtcbmltcG9ydCBVSSBmcm9tIFwiLi9tb2R1bGVzL1VJLmpzXCI7XG5cbmdhbWUuaW5pdEdhbWUoKTtcbmNvbnN0IHN3aXRjaFR1cm5CdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN3aXRjaFR1cm5CdG5cIik7XG5VSS5yZW5kZXJCb2FyZChnYW1lLmN1cnJlbnRQbGF5ZXIuYm9hcmQpO1xuVUkucmVuZGVyU3RhcnQoKTtcblxuc3dpdGNoVHVybkJ0bi5vbmNsaWNrID0gKCkgPT4ge1xuICBVSS50b2dnbGVUdXJuQnRuKCk7XG5cbiAgVUkucmVuZGVyQm9hcmQoZ2FtZS5jdXJyZW50UGxheWVyLmJvYXJkKTtcblxuICBpZiAoZ2FtZS5jdXJyZW50UGxheWVyID09PSBnYW1lLmNvbXB1dGVyUGxheWVyKSB7XG4gICAgZ2FtZS5jb21wdXRlck1vdmVFdmVudCgpO1xuICB9IGVsc2Uge1xuICAgIFVJLnN0YXJ0Q2xpY2tzKCk7XG4gIH1cbn07XG4iXSwibmFtZXMiOlsicGF0aCIsImhpdHMiLCJnZXRMZW5ndGgiLCJjb3VudCIsImZvckVhY2giLCJlbGVtZW50IiwiaXNTdW5rIiwiaGl0IiwiZ2V0SGl0cyIsImdldFBhdGgiLCJyZXNldEhpdHMiLCJ0eXBlIiwiYXR0ZW1wdHMiLCJib2FyZCIsImJvYXJkQXJyYXkiLCJBcnJheSIsIm1hcCIsImUiLCJmaWxsIiwibWlzc2VzIiwic2hpcHMiLCJwbGFjZVNoaXAiLCJzaGlwT2JqZWN0IiwiY29vcmRpbmF0ZXMiLCJ4IiwieSIsImFkZFNoaXAiLCJzaGlwIiwicHVzaCIsInJlY2VpdmVBdHRhY2siLCJhbHJlYWR5SGl0IiwiYWxyZWFkeU1pc3MiLCJzb21lIiwiaXRlbSIsInhJdGVtIiwieUl0ZW0iLCJyZXNldEdhbWVib2FyZCIsImluaXRCb2FyZCIsImlzU2hpcCIsImdldFNoaXAiLCJhdHRlbXB0IiwiZ2VuZXJhdGVNb3ZlIiwiZ2V0UmFuZG9tSW50IiwibWF4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiY2hlY2tBdHRlbXB0ZWQiLCJjb29yZGluYXRlIiwibW92ZSIsIlVJIiwiZ2FtZWJvYXJkIiwidGFyZ2V0Q2VsbCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lckhUTUwiLCJnZXRTZWxlY3RDZWxsIiwic2VsZWN0Q2VsbHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2VsZWN0Q2VsbCIsInBhcnNlSW50IiwiZGF0YXNldCIsInJlbmRlckJvYXJkIiwicGxheWVyQm9hcmQiLCJwbGF5ZXJUaXRsZSIsImNyZWF0ZUVsZW1lbnQiLCJjb25zb2xlIiwibG9nIiwiYXBwZW5kQ2hpbGQiLCJyb3ciLCJyb3dJbmRleCIsInJvd0RpdiIsImNsYXNzTGlzdCIsImFkZCIsImNlbGxJbmRleCIsImNlbGwiLCJpZCIsImNvbXB1dGVyUGxheWVyIiwic3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJhZGRFdmVudExpc3RlbmVyIiwic3RvcFByb3BhZ2F0aW9uIiwidGV4dENvbnRlbnQiLCJtb3ZlRXZlbnQiLCJzdG9wQ2xpY2tzIiwicG9pbnRlckV2ZW50cyIsInN0YXJ0Q2xpY2tzIiwic3R5bGVTdW5rIiwiYm9hcmRUeXBlIiwidXNlclBsYXllciIsInJlbmRlclN0YXJ0Iiwic3RhcnRTY3JlZW4iLCJkaXNwbGF5Iiwic3RhcnRCdXR0b24iLCJjaG9vc2VTaGlwIiwiaSIsImoiLCJvbm1vdXNlZW50ZXIiLCJrIiwibmV3Q2VsbCIsInVuZGVmaW5lZCIsIm9ubW91c2VvdXQiLCJvbmNsaWNrIiwic2hpcENvb3JkaW5hdGVzIiwiZ2VuZXJhdGVHcmlkIiwidG9nZ2xlVHVybkJ0biIsInN3aXRjaFR1cm5CdG4iLCJkaXNhYmxlZCIsImdhbWUiLCJjdXJyZW50UGxheWVyIiwiY2hlY2tMb3NzIiwicGxheWVyIiwibGVuZ3RoIiwiZXZlcnkiLCJhbGVydCIsImluaXRHYW1lIiwic3dpdGNoVHVybiIsImNlbGxCb2FyZCIsImNvbXB1dGVyTW92ZUV2ZW50IiwiYXN5bmMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiXSwic291cmNlUm9vdCI6IiJ9