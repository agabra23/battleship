(()=>{"use strict";const t=function(t){let e=0;const r=()=>{let e=0;return t.forEach((t=>{e++})),e};return{getLength:r,isSunk:()=>e>=r(),hit:()=>{e++},getHits:()=>e,getPath:()=>t,resetHits:()=>{e=0},hits:e}},e=e=>{const r=[],a=function(e){const r=[...Array(10)].map((t=>Array(10).fill("none"))),a=[],o=[];let n=[];const s=t=>{t.getPath().forEach((e=>{const[a,o]=e;r[a][o]=t})),c(t)},c=t=>{n.push(t)};return{placeShip:s,boardArray:r,receiveAttack:t=>{const[e,n]=t;let s,c=!1;s=a.some((e=>{const[r,a]=e;return r===t[0]&&a===t[1]})),c=o.some((e=>{const[r,a]=e;return r===t[0]&&a===t[1]})),"none"!==r[e][n]&&!1===s?(r[e][n].hit(),a.push(t)):"none"===r[e][n]&&!1===c&&o.push(t)},hits:a,misses:o,addShip:c,resetGameboard:()=>{a=[],o=[],n=[]},initBoard:()=>{s(t([[1,4],[1,5]])),s(t([[6,4],[6,5],[6,6]])),s(t([[4,2],[5,2],[6,2],[7,2]])),s(t([[8,3],[8,4],[8,5],[8,6],[8,7]])),s(t([[2,3],[2,4],[2,5],[2,6],[2,7]]))},isShip:t=>{const[e,a]=t;return"none"!==r[e][a]},getShip:t=>{const[e,a]=t;return r[e][a]},ships:n}}(),o=t=>{r.push(t)};return"computer"===e?{attempt:o,generateMove:()=>{const t=t=>Math.floor(Math.random()*t),e=t=>r.some((e=>{const[r,a]=e;return r===t[0]&&a===t[1]}));let a=[t(9),t(9)];for(;e(a);)a=[t(9),t(9)];return a},board:a}:{attempt:o,board:a}},r=t=>{const e=document.getElementById("board");t.boardArray.forEach(((r,a)=>{const o=document.createElement("div");o.classList.add("rowDiv"),r.forEach(((e,r)=>{const n=document.createElement("div");n.classList.add("boardCell"),n.id=`${a},${r}`,n.dataset.board=t.type,n.dataset.x=a,n.dataset.y=r,"none"!==e&&n.classList.add("shipCell"),o.appendChild(n)})),e.appendChild(o)}))},a=(t,e)=>{const[r,a]=t,o=document.getElementById(`${r},${a}`),n=e.isShip(t);o.innerHTML=n?"Hit":"Miss"},o=(()=>{const t=e("computer"),r=e("user");let n=r;const s=t=>{t.board.ships.every((t=>t.isSunk()))&&alert("win")};return{initGame:()=>{console.log("init");const e=r.board;t.board.initBoard(),e.initBoard()},playRound:(e,o)=>{e===r&&(t.board.receiveAttack([2,3]),a([2,3],t.board))},switchTurn:()=>{n=n===r?t:r},computerPlayer:t,userPlayer:r,currentPlayer:n,checkLoss:s,moveEvent:t=>{const e="computer"===t.dataset.board?o.computerPlayer.board:o.userPlayer.board;o.computerPlayer.board.receiveAttack([t.dataset.x,t.dataset.y]),a([t.dataset.x,t.dataset.y],e),s(o.computerPlayer)}}})(),n=o;n.initGame(),r(n.computerPlayer.board),n.playRound(n.currentPlayer),document.querySelectorAll(".boardCell").forEach((t=>{t.addEventListener("click",(()=>{n.moveEvent(t)}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,