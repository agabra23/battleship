(()=>{"use strict";const t=function(t){let e=0;const r=()=>{let e=0;return t.forEach((t=>{e++})),e};return{getLength:r,isSunk:()=>e>=r(),hit:()=>{e++},getHits:()=>e,getPath:()=>t,resetHits:()=>{e=0}}},e=function(){const e=[...Array(10)].map((t=>Array(10).fill("none"))),r=[],n=[];let o=[];const s=t=>{t.getPath().forEach((r=>{const[n,o]=r;e[n][o]=t})),a(t)},a=t=>{o.push(t)};return{placeShip:s,boardArray:e,receiveAttack:t=>{const[o,s]=t;let a,c=!1;a=r.some((e=>{const[r,n]=e;return r===t[0]&&n===t[1]})),c=n.some((e=>{const[r,n]=e;return r===t[0]&&n===t[1]})),"none"!==e[o][s]&&!1===a?(e[o][s].hit(),r.push(t)):"none"===e[o][s]&&!1===c&&n.push(t)},hits:r,misses:n,addShip:a,resetGameboard:()=>{r=[],n=[],o=[]},initBoard:()=>{s(t([[1,4],[1,5]])),s(t([[6,4],[6,5],[6,6]])),s(t([[4,2],[5,2],[6,2],[7,2]])),s(t([[4,2],[5,2],[6,2],[7,2]])),s(t([[8,3],[8,4],[8,5],[8,6],[8,7]])),s(t([[2,3],[2,4],[2,5],[2,6],[2,7]]))},isShip:t=>{const[r,n]=t;return"none"!==e[r][n]}}},r=t=>{const e=[],r=t=>{e.push(t)};return"computer"===t?{attempt:r,generateMove:()=>{const t=t=>Math.floor(Math.random()*t),r=t=>e.some((e=>{const[r,n]=e;return r===t[0]&&n===t[1]}));let n=[t(9),t(9)];for(;r(n);)n=[t(9),t(9)];return n}}:{attempt:r}},n=t=>{const e=document.getElementById("board");t.boardArray.forEach(((t,r)=>{const n=document.createElement("div");n.classList.add("rowDiv"),t.forEach(((t,e)=>{const o=document.createElement("div");o.classList.add("boardCell"),o.id=`${r},${e}`,"none"!==t&&o.classList.add("shipCell"),n.appendChild(o)})),e.appendChild(n)}))},o=(t,e)=>{const[r,n]=t,o=document.getElementById(`${r},${n}`),s=e.isShip(t);o.innerHTML=s?"Hit":"Miss"},s=(()=>{const t=r("computer"),n=e(),s=r("user"),a=e();return{initGame:()=>{console.log("init"),a.initBoard(),n.initBoard()},playRound:t=>{t===s&&(n.receiveAttack([2,3]),o([2,3],n))},computerBoard:n,computerPlayer:t,userBoard:a,userPlayer:s}})();s.initGame(),console.log("start"),n(s.computerBoard),s.playRound(s.userPlayer)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,