(()=>{"use strict";const e=function(e){let t=0;const r=()=>{let t=0;return e.forEach((e=>{t++})),t};return{getLength:r,isSunk:()=>t>=r(),hit:()=>{t++},getHits:()=>t,getPath:()=>e,resetHits:()=>{t=0},hits:t}},t=function(t){const r=[...Array(10)].map((e=>Array(10).fill("none"))),n=[],o=[];let s=[];const a=e=>{e.getPath().forEach((t=>{const[n,o]=t;r[n][o]=e})),c(e)},c=e=>{s.push(e)};return{placeShip:a,boardArray:r,receiveAttack:e=>{const[t,s]=e;let a,c=!1;a=n.some((t=>{const[r,n]=t;return r===e[0]&&n===e[1]})),c=o.some((t=>{const[r,n]=t;return r===e[0]&&n===e[1]})),"none"!==r[t][s]&&!1===a?(r[t][s].hit(),n.push(e)):"none"===r[t][s]&&!1===c&&o.push(e)},hits:n,misses:o,addShip:c,resetGameboard:()=>{n=[],o=[],s=[]},initBoard:()=>{a(e([[1,4],[1,5]])),a(e([[6,4],[6,5],[6,6]])),a(e([[4,2],[5,2],[6,2],[7,2]])),a(e([[8,3],[8,4],[8,5],[8,6],[8,7]])),a(e([[2,3],[2,4],[2,5],[2,6],[2,7]]))},isShip:e=>{const[t,n]=e;return"none"!==r[t][n]},getShip:e=>{const[t,n]=e;return r[t][n]},ships:s,type:t}},r=e=>{const r=[];return{attempt:e=>{r.push(e)},board:t(e),type:e,generateMove:()=>{const e=e=>Math.floor(Math.random()*e),t=e=>r.some((t=>{const[r,n]=t;return r===e[0]&&n===e[1]}));let n=[e(9),e(9)];for(;t(n);)n=[e(9),e(9)];return n}}},n=(()=>{const e=(e,t)=>{const[r,n]=e,o=document.getElementById(`${t.type} - ${r},${n}`),s=t.isShip(e);o.innerHTML=s?"Hit":"Miss"};return{renderBoard:t=>{const r=document.getElementById("board");r.innerHTML='<div id="overlay"></div>';const n=document.createElement("h3");console.log(t),n.innerHTML=`${t.type}'s Turn`,r.appendChild(n),t.boardArray.forEach(((e,n)=>{const o=document.createElement("div");o.classList.add("rowDiv"),e.forEach(((e,r)=>{const a=document.createElement("div");a.classList.add("boardCell"),a.id=`${t.type} - ${n},${r}`,a.dataset.board=t.type,a.dataset.x=n,a.dataset.y=r,"none"!==e&&(a.classList.add("shipCell"),e.isSunk()&&(a.style.backgroundColor="red")),a.addEventListener("click",(e=>{e.stopPropagation(),""===a.textContent&&s.moveEvent(a)})),o.appendChild(a)})),r.appendChild(o)})),t.misses.forEach((r=>{e(r,t)})),t.hits.forEach((r=>{e(r,t)}))},attempt:e,stopClicks:()=>{document.getElementById("overlay").style.pointerEvents="all"},startClicks:()=>{document.getElementById("overlay").style.pointerEvents="none"},styleSunk:e=>{document.querySelectorAll(".rowDiv").forEach((t=>{document.querySelectorAll(".boardCell").forEach((t=>{const[r,n]=[t.dataset.x,t.dataset.y];"User"===e?s.userPlayer.board.isShip([r,n])&&s.userPlayer.board.getShip([r,n]).isSunk()&&(t.style.backgroundColor="red"):s.computerPlayer.board.isShip([r,n])&&s.computerPlayer.board.getShip([r,n]).isSunk()&&(t.style.backgroundColor="red")}))}))},renderStart:()=>{const e=document.getElementById("startScreen");e.style.display="flex";const t=document.createElement("button");t.id="startBtn",t.textContent="Start Game",e.appendChild(t),document.getElementById("board").style.display="none",document.getElementById("switchTurnBtn").style.display="none",t.onclick=()=>{e.style.display="",document.getElementById("board").style.display="",document.getElementById("switchTurnBtn").style.display="",t.style.display="none"}}}})(),o=(()=>{const e=r("Computer"),t=r("User");let s=t;const a=e=>{e.board.ships.every((e=>e.isSunk()))&&alert("win")};return{initGame:()=>{const r=t.board;e.board.initBoard(),r.initBoard()},switchTurn:()=>{console.log("start switch",o.currentPlayer.type),o.currentPlayer===t?o.currentPlayer=e:o.currentPlayer=t,console.log("end switch",o.currentPlayer.type)},computerPlayer:e,userPlayer:t,currentPlayer:s,checkLoss:a,moveEvent:r=>{n.stopClicks();const c="Computer"===r.dataset.board?e.board:t.board;c.receiveAttack([r.dataset.x,r.dataset.y]),n.attempt([r.dataset.x,r.dataset.y],c),n.styleSunk(c.type),a(s),o.switchTurn()}}})(),s=o;s.initGame();const a=document.getElementById("switchTurnBtn");n.renderBoard(s.currentPlayer.board),n.renderStart(),a.onclick=()=>{if(n.startClicks(),n.renderBoard(s.currentPlayer.board),s.currentPlayer===s.computerPlayer){console.log("reaching");const e=s.computerPlayer.generateMove();n.stopClicks();const t=s.computerPlayer.board;t.receiveAttack(e),n.attempt(e,t),n.styleSunk(t.type),s.checkLoss(s.currentPlayer),s.switchTurn()}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFLRSxRQUFRaEQsRUFBRzhDLEVBQUtFLFFBQVEvQyxJQUN0RCxFQUFHZ0IsUUFBUSxDQUFDNkIsRUFBS0UsUUFBUWhELEVBQUc4QyxFQUFLRSxRQUFRL0MsR0FBSTRFLEdBQzdDLEVBQUduQixVQUFVbUIsRUFBVXhGLE1BQ3ZCaUYsRUFBVUQsR0FDVkQsRUFBS1EsWUFBWSxFQVlwQixFQXZEWSxHQXlEYixJQ3pEQSxFQUFLRixXQUNMLE1BQU1JLEVBQWdCaEQsU0FBU0MsZUFBZSxpQkFDOUMsRUFBR0UsWUFBWSxFQUFLb0MsY0FBY25ELE9BQ2xDLEVBQUc2QyxjQUVIZSxFQUFjWCxRQUFVLEtBS3RCLEdBSkEsRUFBR1YsY0FFSCxFQUFHeEIsWUFBWSxFQUFLb0MsY0FBY25ELE9BRTlCLEVBQUttRCxnQkFBa0IsRUFBS1AsZUFBZ0IsQ0FDOUN6QixRQUFRQyxJQUFJLFlBRVosTUFBTXZDLEVBQWMsRUFBSytELGVBQWUzQyxlQUN4QyxFQUFHb0MsYUFFSCxNQUFNc0IsRUFBWSxFQUFLZixlQUFlNUMsTUFFdEMyRCxFQUFVeEUsY0FBY04sR0FDeEIsRUFBR2tCLFFBQVFsQixFQUFhOEUsR0FDeEIsRUFBR25CLFVBQVVtQixFQUFVeEYsTUFDdkIsRUFBS2lGLFVBQVUsRUFBS0QsZUFDcEIsRUFBS08sWUFFUCxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL1NoaXAuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL0dhbWVib2FyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvUGxheWVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvbW9kdWxlcy9VSS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvZ2FtZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNoaXAgPSBmdW5jdGlvbiAocGF0aCkge1xuICBsZXQgaGl0cyA9IDA7XG5cbiAgY29uc3QgZ2V0SGl0cyA9ICgpID0+IHtcbiAgICByZXR1cm4gaGl0cztcbiAgfTtcblxuICBjb25zdCBoaXQgPSAoKSA9PiB7XG4gICAgaGl0cysrO1xuICB9O1xuXG4gIGNvbnN0IGdldExlbmd0aCA9ICgpID0+IHtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIHBhdGguZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgY291bnQrKztcbiAgICB9KTtcbiAgICByZXR1cm4gY291bnQ7XG4gIH07XG5cbiAgY29uc3QgaXNTdW5rID0gKCkgPT4ge1xuICAgIHJldHVybiBoaXRzID49IGdldExlbmd0aCgpO1xuICB9O1xuXG4gIGNvbnN0IGdldFBhdGggPSAoKSA9PiB7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH07XG5cbiAgY29uc3QgcmVzZXRIaXRzID0gKCkgPT4ge1xuICAgIGhpdHMgPSAwO1xuICB9O1xuXG4gIHJldHVybiB7IGdldExlbmd0aCwgaXNTdW5rLCBoaXQsIGdldEhpdHMsIGdldFBhdGgsIHJlc2V0SGl0cywgaGl0cyB9O1xufTtcbmV4cG9ydCBkZWZhdWx0IFNoaXA7XG4iLCJpbXBvcnQgU2hpcCBmcm9tIFwiLi9TaGlwLmpzXCI7XG5cbmNvbnN0IEdhbWVib2FyZCA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gIGNvbnN0IGJvYXJkQXJyYXkgPSBbLi4uQXJyYXkoMTApXS5tYXAoKGUpID0+IEFycmF5KDEwKS5maWxsKFwibm9uZVwiKSk7XG4gIGNvbnN0IGhpdHMgPSBbXTtcbiAgY29uc3QgbWlzc2VzID0gW107XG4gIGxldCBzaGlwcyA9IFtdO1xuXG4gIGNvbnN0IGluaXRCb2FyZCA9ICgpID0+IHtcbiAgICBwbGFjZVNoaXAoXG4gICAgICBTaGlwKFtcbiAgICAgICAgWzEsIDRdLFxuICAgICAgICBbMSwgNV0sXG4gICAgICBdKVxuICAgICk7XG4gICAgcGxhY2VTaGlwKFxuICAgICAgU2hpcChbXG4gICAgICAgIFs2LCA0XSxcbiAgICAgICAgWzYsIDVdLFxuICAgICAgICBbNiwgNl0sXG4gICAgICBdKVxuICAgICk7XG4gICAgcGxhY2VTaGlwKFxuICAgICAgU2hpcChbXG4gICAgICAgIFs0LCAyXSxcbiAgICAgICAgWzUsIDJdLFxuICAgICAgICBbNiwgMl0sXG4gICAgICAgIFs3LCAyXSxcbiAgICAgIF0pXG4gICAgKTtcblxuICAgIHBsYWNlU2hpcChcbiAgICAgIFNoaXAoW1xuICAgICAgICBbOCwgM10sXG4gICAgICAgIFs4LCA0XSxcbiAgICAgICAgWzgsIDVdLFxuICAgICAgICBbOCwgNl0sXG4gICAgICAgIFs4LCA3XSxcbiAgICAgIF0pXG4gICAgKTtcbiAgICBwbGFjZVNoaXAoXG4gICAgICBTaGlwKFtcbiAgICAgICAgWzIsIDNdLFxuICAgICAgICBbMiwgNF0sXG4gICAgICAgIFsyLCA1XSxcbiAgICAgICAgWzIsIDZdLFxuICAgICAgICBbMiwgN10sXG4gICAgICBdKVxuICAgICk7XG4gIH07XG5cbiAgY29uc3QgcmVzZXRHYW1lYm9hcmQgPSAoKSA9PiB7XG4gICAgaGl0cyA9IFtdO1xuICAgIG1pc3NlcyA9IFtdO1xuICAgIHNoaXBzID0gW107XG4gIH07XG5cbiAgY29uc3QgcGxhY2VTaGlwID0gKHNoaXBPYmplY3QpID0+IHtcbiAgICBjb25zdCBwYXRoID0gc2hpcE9iamVjdC5nZXRQYXRoKCk7XG4gICAgcGF0aC5mb3JFYWNoKChjb29yZGluYXRlcykgPT4ge1xuICAgICAgY29uc3QgW3gsIHldID0gY29vcmRpbmF0ZXM7XG4gICAgICBib2FyZEFycmF5W3hdW3ldID0gc2hpcE9iamVjdDtcbiAgICB9KTtcbiAgICBhZGRTaGlwKHNoaXBPYmplY3QpO1xuICB9O1xuXG4gIGNvbnN0IHJlY2VpdmVBdHRhY2sgPSAoY29vcmRpbmF0ZXMpID0+IHtcbiAgICBjb25zdCBbeCwgeV0gPSBjb29yZGluYXRlcztcblxuICAgIGxldCBhbHJlYWR5SGl0LFxuICAgICAgYWxyZWFkeU1pc3MgPSBmYWxzZTtcblxuICAgIGFscmVhZHlIaXQgPSBoaXRzLnNvbWUoKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IFt4SXRlbSwgeUl0ZW1dID0gaXRlbTtcbiAgICAgIHJldHVybiB4SXRlbSA9PT0gY29vcmRpbmF0ZXNbMF0gJiYgeUl0ZW0gPT09IGNvb3JkaW5hdGVzWzFdO1xuICAgIH0pO1xuICAgIGFscmVhZHlNaXNzID0gbWlzc2VzLnNvbWUoKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IFt4SXRlbSwgeUl0ZW1dID0gaXRlbTtcbiAgICAgIHJldHVybiB4SXRlbSA9PT0gY29vcmRpbmF0ZXNbMF0gJiYgeUl0ZW0gPT09IGNvb3JkaW5hdGVzWzFdO1xuICAgIH0pO1xuXG4gICAgaWYgKGJvYXJkQXJyYXlbeF1beV0gIT09IFwibm9uZVwiICYmIGFscmVhZHlIaXQgPT09IGZhbHNlKSB7XG4gICAgICBib2FyZEFycmF5W3hdW3ldLmhpdCgpO1xuICAgICAgaGl0cy5wdXNoKGNvb3JkaW5hdGVzKTtcbiAgICB9IGVsc2UgaWYgKGJvYXJkQXJyYXlbeF1beV0gPT09IFwibm9uZVwiICYmIGFscmVhZHlNaXNzID09PSBmYWxzZSkge1xuICAgICAgbWlzc2VzLnB1c2goY29vcmRpbmF0ZXMpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBhZGRTaGlwID0gKHNoaXApID0+IHtcbiAgICBzaGlwcy5wdXNoKHNoaXApO1xuICB9O1xuXG4gIGNvbnN0IGlzU2hpcCA9IChjb29yZGluYXRlcykgPT4ge1xuICAgIGNvbnN0IFt4LCB5XSA9IGNvb3JkaW5hdGVzO1xuXG4gICAgcmV0dXJuIGJvYXJkQXJyYXlbeF1beV0gIT09IFwibm9uZVwiO1xuICB9O1xuXG4gIGNvbnN0IGdldFNoaXAgPSAoY29vcmRpbmF0ZXMpID0+IHtcbiAgICBjb25zdCBbeCwgeV0gPSBjb29yZGluYXRlcztcblxuICAgIHJldHVybiBib2FyZEFycmF5W3hdW3ldO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgcGxhY2VTaGlwLFxuICAgIGJvYXJkQXJyYXksXG4gICAgcmVjZWl2ZUF0dGFjayxcbiAgICBoaXRzLFxuICAgIG1pc3NlcyxcbiAgICBhZGRTaGlwLFxuICAgIHJlc2V0R2FtZWJvYXJkLFxuICAgIGluaXRCb2FyZCxcbiAgICBpc1NoaXAsXG4gICAgZ2V0U2hpcCxcbiAgICBzaGlwcyxcbiAgICB0eXBlLFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgR2FtZWJvYXJkO1xuIiwiaW1wb3J0IEdhbWVib2FyZCBmcm9tIFwiLi9HYW1lYm9hcmRcIjtcblxuY29uc3QgUGxheWVyID0gKHR5cGUpID0+IHtcbiAgY29uc3QgYXR0ZW1wdHMgPSBbXTtcbiAgY29uc3QgdHVybiA9IGZhbHNlO1xuICBjb25zdCBib2FyZCA9IEdhbWVib2FyZCh0eXBlKTtcblxuICBjb25zdCBhdHRlbXB0ID0gKGNvb3JkaW5hdGVzKSA9PiB7XG4gICAgYXR0ZW1wdHMucHVzaChjb29yZGluYXRlcyk7XG4gIH07XG5cbiAgY29uc3QgZ2VuZXJhdGVNb3ZlID0gKCkgPT4ge1xuICAgIGNvbnN0IGdldFJhbmRvbUludCA9IChtYXgpID0+IHtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtYXgpO1xuICAgIH07XG5cbiAgICBjb25zdCBjaGVja0F0dGVtcHRlZCA9IChhdHRlbXB0KSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhdHRlbXB0cy5zb21lKChjb29yZGluYXRlKSA9PiB7XG4gICAgICAgIGNvbnN0IFt4LCB5XSA9IGNvb3JkaW5hdGU7XG5cbiAgICAgICAgcmV0dXJuIHggPT09IGF0dGVtcHRbMF0gJiYgeSA9PT0gYXR0ZW1wdFsxXTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBsZXQgbW92ZSA9IFtnZXRSYW5kb21JbnQoOSksIGdldFJhbmRvbUludCg5KV07XG5cbiAgICB3aGlsZSAoY2hlY2tBdHRlbXB0ZWQobW92ZSkpIHtcbiAgICAgIG1vdmUgPSBbZ2V0UmFuZG9tSW50KDkpLCBnZXRSYW5kb21JbnQoOSldO1xuICAgIH1cblxuICAgIHJldHVybiBtb3ZlO1xuICB9O1xuXG4gIHJldHVybiB7IGF0dGVtcHQsIGJvYXJkLCB0eXBlLCBnZW5lcmF0ZU1vdmUgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBsYXllcjtcbiIsImltcG9ydCBHYW1lYm9hcmQgZnJvbSBcIi4vR2FtZWJvYXJkXCI7XG5pbXBvcnQgUGxheWVyIGZyb20gXCIuL1BsYXllclwiO1xuaW1wb3J0IFNoaXAgZnJvbSBcIi4vU2hpcFwiO1xuaW1wb3J0IGdhbWUgZnJvbSBcIi4vZ2FtZVwiO1xuXG5jb25zdCBVSSA9ICgoKSA9PiB7XG4gIGNvbnN0IHJlbmRlclN0YXJ0ID0gKCkgPT4ge1xuICAgIGNvbnN0IHN0YXJ0U2NyZWVuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdGFydFNjcmVlblwiKTtcbiAgICBzdGFydFNjcmVlbi5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG5cbiAgICBjb25zdCBzdGFydEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgc3RhcnRCdXR0b24uaWQgPSBcInN0YXJ0QnRuXCI7XG4gICAgc3RhcnRCdXR0b24udGV4dENvbnRlbnQgPSBcIlN0YXJ0IEdhbWVcIjtcblxuICAgIHN0YXJ0U2NyZWVuLmFwcGVuZENoaWxkKHN0YXJ0QnV0dG9uKTtcblxuICAgIGNvbnN0IGJvYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJib2FyZFwiKTtcbiAgICBib2FyZC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cbiAgICBjb25zdCBuZXh0VHVybkJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3dpdGNoVHVybkJ0blwiKTtcbiAgICBuZXh0VHVybkJ0bi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cbiAgICBzdGFydEJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgc3RhcnRFdmVudChzdGFydFNjcmVlbik7XG4gICAgICBzdGFydEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgfTtcbiAgfTtcblxuICBjb25zdCBzdGFydEV2ZW50ID0gKGVsZW1lbnQpID0+IHtcbiAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXG4gICAgY29uc3QgYm9hcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJvYXJkXCIpO1xuICAgIGJvYXJkLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXG4gICAgY29uc3QgbmV4dFR1cm5CdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN3aXRjaFR1cm5CdG5cIik7XG4gICAgbmV4dFR1cm5CdG4uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG4gIH07XG5cbiAgY29uc3QgcmVuZGVyQm9hcmQgPSAocGxheWVyQm9hcmQpID0+IHtcbiAgICBjb25zdCBib2FyZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYm9hcmRcIik7XG4gICAgYm9hcmQuaW5uZXJIVE1MID0gYDxkaXYgaWQ9XCJvdmVybGF5XCI+PC9kaXY+YDtcblxuICAgIGNvbnN0IHBsYXllclRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgzXCIpO1xuICAgIGNvbnNvbGUubG9nKHBsYXllckJvYXJkKTtcbiAgICBwbGF5ZXJUaXRsZS5pbm5lckhUTUwgPSBgJHtwbGF5ZXJCb2FyZC50eXBlfSdzIFR1cm5gO1xuXG4gICAgYm9hcmQuYXBwZW5kQ2hpbGQocGxheWVyVGl0bGUpO1xuXG4gICAgcGxheWVyQm9hcmQuYm9hcmRBcnJheS5mb3JFYWNoKChyb3csIHJvd0luZGV4KSA9PiB7XG4gICAgICBjb25zdCByb3dEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgcm93RGl2LmNsYXNzTGlzdC5hZGQoXCJyb3dEaXZcIik7XG5cbiAgICAgIHJvdy5mb3JFYWNoKChpdGVtLCBjZWxsSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcImJvYXJkQ2VsbFwiKTtcbiAgICAgICAgY2VsbC5pZCA9IGAke3BsYXllckJvYXJkLnR5cGV9IC0gJHtyb3dJbmRleH0sJHtjZWxsSW5kZXh9YDtcbiAgICAgICAgY2VsbC5kYXRhc2V0LmJvYXJkID0gcGxheWVyQm9hcmQudHlwZTtcbiAgICAgICAgY2VsbC5kYXRhc2V0LnggPSByb3dJbmRleDtcbiAgICAgICAgY2VsbC5kYXRhc2V0LnkgPSBjZWxsSW5kZXg7XG4gICAgICAgIGlmIChpdGVtICE9PSBcIm5vbmVcIikge1xuICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcInNoaXBDZWxsXCIpO1xuXG4gICAgICAgICAgaWYgKGl0ZW0uaXNTdW5rKCkpIHtcbiAgICAgICAgICAgIGNlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjZWxsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICAgIC8vIGFkanVzdCB0aGlzLiBNYXliZSBtYWtlIGl0IGEgcGxheVJvdW5kIHRoaW5nIHRvIGtpY2sgb2ZmIGEgcm91bmQgYW5kIGVuZCBpdCB3aXRoIGEgdHVybiBzd2l0Y2guXG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBpZiAoY2VsbC50ZXh0Q29udGVudCA9PT0gXCJcIikgZ2FtZS5tb3ZlRXZlbnQoY2VsbCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJvd0Rpdi5hcHBlbmRDaGlsZChjZWxsKTtcbiAgICAgIH0pO1xuXG4gICAgICBib2FyZC5hcHBlbmRDaGlsZChyb3dEaXYpO1xuICAgIH0pO1xuXG4gICAgcGxheWVyQm9hcmQubWlzc2VzLmZvckVhY2goKGNvb3JkaW5hdGVzKSA9PiB7XG4gICAgICBhdHRlbXB0KGNvb3JkaW5hdGVzLCBwbGF5ZXJCb2FyZCk7XG4gICAgfSk7XG4gICAgcGxheWVyQm9hcmQuaGl0cy5mb3JFYWNoKChjb29yZGluYXRlcykgPT4ge1xuICAgICAgYXR0ZW1wdChjb29yZGluYXRlcywgcGxheWVyQm9hcmQpO1xuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IGF0dGVtcHQgPSAoY29vcmRpbmF0ZXMsIGdhbWVib2FyZCkgPT4ge1xuICAgIGNvbnN0IFt4LCB5XSA9IGNvb3JkaW5hdGVzO1xuICAgIGNvbnN0IHRhcmdldENlbGwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtnYW1lYm9hcmQudHlwZX0gLSAke3h9LCR7eX1gKTtcbiAgICBjb25zdCBpc1NoaXAgPSBnYW1lYm9hcmQuaXNTaGlwKGNvb3JkaW5hdGVzKTtcblxuICAgIGlmIChpc1NoaXApIHtcbiAgICAgIHRhcmdldENlbGwuaW5uZXJIVE1MID0gXCJIaXRcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0Q2VsbC5pbm5lckhUTUwgPSBcIk1pc3NcIjtcbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgc3RvcENsaWNrcyA9ICgpID0+IHtcbiAgICBjb25zdCBvdmVybGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvdmVybGF5XCIpO1xuXG4gICAgb3ZlcmxheS5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJhbGxcIjtcbiAgfTtcblxuICBjb25zdCBzdGFydENsaWNrcyA9ICgpID0+IHtcbiAgICBjb25zdCBvdmVybGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvdmVybGF5XCIpO1xuXG4gICAgb3ZlcmxheS5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJub25lXCI7XG4gIH07XG5cbiAgY29uc3Qgc3R5bGVTdW5rID0gKGJvYXJkVHlwZSkgPT4ge1xuICAgIGNvbnN0IHJvd3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnJvd0RpdlwiKTtcbiAgICByb3dzLmZvckVhY2goKHJvdykgPT4ge1xuICAgICAgY29uc3QgY2VsbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmJvYXJkQ2VsbFwiKTtcbiAgICAgIGNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgY29uc3QgW3gsIHldID0gW2NlbGwuZGF0YXNldC54LCBjZWxsLmRhdGFzZXQueV07XG5cbiAgICAgICAgaWYgKGJvYXJkVHlwZSA9PT0gXCJVc2VyXCIpIHtcbiAgICAgICAgICBpZiAoZ2FtZS51c2VyUGxheWVyLmJvYXJkLmlzU2hpcChbeCwgeV0pKSB7XG4gICAgICAgICAgICBjb25zdCBzaGlwID0gZ2FtZS51c2VyUGxheWVyLmJvYXJkLmdldFNoaXAoW3gsIHldKTtcbiAgICAgICAgICAgIGlmIChzaGlwLmlzU3VuaygpKSBjZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChnYW1lLmNvbXB1dGVyUGxheWVyLmJvYXJkLmlzU2hpcChbeCwgeV0pKSB7XG4gICAgICAgICAgICBjb25zdCBzaGlwID0gZ2FtZS5jb21wdXRlclBsYXllci5ib2FyZC5nZXRTaGlwKFt4LCB5XSk7XG4gICAgICAgICAgICBpZiAoc2hpcC5pc1N1bmsoKSkgY2VsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gQ2hvb3NlIFNoaXAgTG9jYXRpb25zXG5cbiAgY29uc3QgZ2VuZXJhdGVHcmlkID0gKCkgPT4ge1xuICAgIGNvbnN0IHN0YXJ0U2NyZWVuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdGFydFNjcmVlblwiKTtcbiAgICBzdGFydFNjcmVlbi5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgIGNvbnN0IHJvd0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICByb3dEaXYuY2xhc3NMaXN0LmFkZChcInJvd0RpdlwiKTtcblxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAxMDsgaisrKSB7XG4gICAgICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoXCJib2FyZENlbGxcIik7XG4gICAgICAgIHJvd0Rpdi5hcHBlbmRDaGlsZChjZWxsKTtcblxuICAgICAgICBjZWxsLmRhdGFzZXQueCA9IGk7XG4gICAgICAgIGNlbGwuZGF0YXNldC55ID0gajtcbiAgICAgIH1cblxuICAgICAgc3RhcnRTY3JlZW4uYXBwZW5kQ2hpbGQocm93RGl2KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICByZW5kZXJCb2FyZCxcbiAgICBhdHRlbXB0LFxuICAgIHN0b3BDbGlja3MsXG4gICAgc3RhcnRDbGlja3MsXG4gICAgc3R5bGVTdW5rLFxuICAgIHJlbmRlclN0YXJ0LFxuICB9O1xufSkoKTtcblxuZXhwb3J0IGRlZmF1bHQgVUk7XG4iLCJpbXBvcnQgR2FtZWJvYXJkIGZyb20gXCIuL0dhbWVib2FyZFwiO1xuaW1wb3J0IFNoaXAgZnJvbSBcIi4vU2hpcFwiO1xuaW1wb3J0IFBsYXllciBmcm9tIFwiLi9QbGF5ZXJcIjtcbmltcG9ydCBVSSBmcm9tIFwiLi9VSVwiO1xuXG5jb25zdCBnYW1lID0gKCgpID0+IHtcbiAgY29uc3QgY29tcHV0ZXJQbGF5ZXIgPSBQbGF5ZXIoXCJDb21wdXRlclwiKTtcbiAgY29uc3QgdXNlclBsYXllciA9IFBsYXllcihcIlVzZXJcIik7XG5cbiAgbGV0IGN1cnJlbnRQbGF5ZXIgPSB1c2VyUGxheWVyO1xuXG4gIGNvbnN0IGluaXRHYW1lID0gKCkgPT4ge1xuICAgIGNvbnN0IHVzZXJCb2FyZCA9IHVzZXJQbGF5ZXIuYm9hcmQ7XG4gICAgY29uc3QgY29tcHV0ZXJCb2FyZCA9IGNvbXB1dGVyUGxheWVyLmJvYXJkO1xuICAgIGNvbXB1dGVyQm9hcmQuaW5pdEJvYXJkKCk7XG4gICAgdXNlckJvYXJkLmluaXRCb2FyZCgpO1xuICB9O1xuXG4gIGNvbnN0IHN3aXRjaFR1cm4gPSAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJzdGFydCBzd2l0Y2hcIiwgZ2FtZS5jdXJyZW50UGxheWVyLnR5cGUpO1xuICAgIGlmIChnYW1lLmN1cnJlbnRQbGF5ZXIgPT09IHVzZXJQbGF5ZXIpIHtcbiAgICAgIGdhbWUuY3VycmVudFBsYXllciA9IGNvbXB1dGVyUGxheWVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBnYW1lLmN1cnJlbnRQbGF5ZXIgPSB1c2VyUGxheWVyO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKFwiZW5kIHN3aXRjaFwiLCBnYW1lLmN1cnJlbnRQbGF5ZXIudHlwZSk7XG4gIH07XG5cbiAgY29uc3QgY2hlY2tMb3NzID0gKHBsYXllcikgPT4ge1xuICAgIGNvbnN0IGFsbFN1bmsgPSBwbGF5ZXIuYm9hcmQuc2hpcHMuZXZlcnkoKHNoaXApID0+IHtcbiAgICAgIHJldHVybiBzaGlwLmlzU3VuaygpO1xuICAgIH0pO1xuXG4gICAgaWYgKGFsbFN1bmspIGFsZXJ0KFwid2luXCIpO1xuICB9O1xuXG4gIGNvbnN0IG1vdmVFdmVudCA9IChjZWxsKSA9PiB7XG4gICAgVUkuc3RvcENsaWNrcygpO1xuICAgIGNvbnN0IGNlbGxCb2FyZCA9XG4gICAgICBjZWxsLmRhdGFzZXQuYm9hcmQgPT09IFwiQ29tcHV0ZXJcIlxuICAgICAgICA/IGNvbXB1dGVyUGxheWVyLmJvYXJkXG4gICAgICAgIDogdXNlclBsYXllci5ib2FyZDtcblxuICAgIGNlbGxCb2FyZC5yZWNlaXZlQXR0YWNrKFtjZWxsLmRhdGFzZXQueCwgY2VsbC5kYXRhc2V0LnldKTtcbiAgICBVSS5hdHRlbXB0KFtjZWxsLmRhdGFzZXQueCwgY2VsbC5kYXRhc2V0LnldLCBjZWxsQm9hcmQpO1xuICAgIFVJLnN0eWxlU3VuayhjZWxsQm9hcmQudHlwZSk7XG4gICAgY2hlY2tMb3NzKGN1cnJlbnRQbGF5ZXIpO1xuICAgIGdhbWUuc3dpdGNoVHVybigpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgaW5pdEdhbWUsXG4gICAgc3dpdGNoVHVybixcbiAgICBjb21wdXRlclBsYXllcixcbiAgICB1c2VyUGxheWVyLFxuICAgIGN1cnJlbnRQbGF5ZXIsXG4gICAgY2hlY2tMb3NzLFxuICAgIG1vdmVFdmVudCxcbiAgfTtcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGdhbWU7XG4iLCJpbXBvcnQgR2FtZWJvYXJkIGZyb20gXCIuL21vZHVsZXMvR2FtZWJvYXJkLmpzXCI7XG5pbXBvcnQgU2hpcCBmcm9tIFwiLi9tb2R1bGVzL1NoaXAuanNcIjtcbmltcG9ydCBnYW1lIGZyb20gXCIuL21vZHVsZXMvZ2FtZS5qc1wiO1xuaW1wb3J0IFVJIGZyb20gXCIuL21vZHVsZXMvVUkuanNcIjtcblxuZ2FtZS5pbml0R2FtZSgpO1xuY29uc3Qgc3dpdGNoVHVybkJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3dpdGNoVHVybkJ0blwiKTtcblVJLnJlbmRlckJvYXJkKGdhbWUuY3VycmVudFBsYXllci5ib2FyZCk7XG5VSS5yZW5kZXJTdGFydCgpO1xuXG5zd2l0Y2hUdXJuQnRuLm9uY2xpY2sgPSAoKSA9PiB7XG4gIFVJLnN0YXJ0Q2xpY2tzKCk7XG5cbiAgVUkucmVuZGVyQm9hcmQoZ2FtZS5jdXJyZW50UGxheWVyLmJvYXJkKTtcblxuICBpZiAoZ2FtZS5jdXJyZW50UGxheWVyID09PSBnYW1lLmNvbXB1dGVyUGxheWVyKSB7XG4gICAgY29uc29sZS5sb2coXCJyZWFjaGluZ1wiKTtcblxuICAgIGNvbnN0IGNvb3JkaW5hdGVzID0gZ2FtZS5jb21wdXRlclBsYXllci5nZW5lcmF0ZU1vdmUoKTtcbiAgICBVSS5zdG9wQ2xpY2tzKCk7XG5cbiAgICBjb25zdCBjZWxsQm9hcmQgPSBnYW1lLmNvbXB1dGVyUGxheWVyLmJvYXJkO1xuXG4gICAgY2VsbEJvYXJkLnJlY2VpdmVBdHRhY2soY29vcmRpbmF0ZXMpO1xuICAgIFVJLmF0dGVtcHQoY29vcmRpbmF0ZXMsIGNlbGxCb2FyZCk7XG4gICAgVUkuc3R5bGVTdW5rKGNlbGxCb2FyZC50eXBlKTtcbiAgICBnYW1lLmNoZWNrTG9zcyhnYW1lLmN1cnJlbnRQbGF5ZXIpO1xuICAgIGdhbWUuc3dpdGNoVHVybigpO1xuICAgIFVJO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbInBhdGgiLCJoaXRzIiwiZ2V0TGVuZ3RoIiwiY291bnQiLCJmb3JFYWNoIiwiZWxlbWVudCIsImlzU3VuayIsImhpdCIsImdldEhpdHMiLCJnZXRQYXRoIiwicmVzZXRIaXRzIiwidHlwZSIsImJvYXJkQXJyYXkiLCJBcnJheSIsIm1hcCIsImUiLCJmaWxsIiwibWlzc2VzIiwic2hpcHMiLCJwbGFjZVNoaXAiLCJzaGlwT2JqZWN0IiwiY29vcmRpbmF0ZXMiLCJ4IiwieSIsImFkZFNoaXAiLCJzaGlwIiwicHVzaCIsInJlY2VpdmVBdHRhY2siLCJhbHJlYWR5SGl0IiwiYWxyZWFkeU1pc3MiLCJzb21lIiwiaXRlbSIsInhJdGVtIiwieUl0ZW0iLCJyZXNldEdhbWVib2FyZCIsImluaXRCb2FyZCIsImlzU2hpcCIsImdldFNoaXAiLCJhdHRlbXB0cyIsImF0dGVtcHQiLCJib2FyZCIsImdlbmVyYXRlTW92ZSIsImdldFJhbmRvbUludCIsIm1heCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImNoZWNrQXR0ZW1wdGVkIiwiY29vcmRpbmF0ZSIsIm1vdmUiLCJnYW1lYm9hcmQiLCJ0YXJnZXRDZWxsIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImlubmVySFRNTCIsInJlbmRlckJvYXJkIiwicGxheWVyQm9hcmQiLCJwbGF5ZXJUaXRsZSIsImNyZWF0ZUVsZW1lbnQiLCJjb25zb2xlIiwibG9nIiwiYXBwZW5kQ2hpbGQiLCJyb3ciLCJyb3dJbmRleCIsInJvd0RpdiIsImNsYXNzTGlzdCIsImFkZCIsImNlbGxJbmRleCIsImNlbGwiLCJpZCIsImRhdGFzZXQiLCJzdHlsZSIsImJhY2tncm91bmRDb2xvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdG9wUHJvcGFnYXRpb24iLCJ0ZXh0Q29udGVudCIsIm1vdmVFdmVudCIsInN0b3BDbGlja3MiLCJwb2ludGVyRXZlbnRzIiwic3RhcnRDbGlja3MiLCJzdHlsZVN1bmsiLCJib2FyZFR5cGUiLCJxdWVyeVNlbGVjdG9yQWxsIiwidXNlclBsYXllciIsImNvbXB1dGVyUGxheWVyIiwicmVuZGVyU3RhcnQiLCJzdGFydFNjcmVlbiIsImRpc3BsYXkiLCJzdGFydEJ1dHRvbiIsIm9uY2xpY2siLCJnYW1lIiwiY3VycmVudFBsYXllciIsImNoZWNrTG9zcyIsInBsYXllciIsImV2ZXJ5IiwiYWxlcnQiLCJpbml0R2FtZSIsInVzZXJCb2FyZCIsInN3aXRjaFR1cm4iLCJjZWxsQm9hcmQiLCJzd2l0Y2hUdXJuQnRuIl0sInNvdXJjZVJvb3QiOiIifQ==